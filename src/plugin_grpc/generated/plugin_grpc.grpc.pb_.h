// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plugin_grpc.proto
#ifndef GRPC_plugin_5fgrpc_2eproto__INCLUDED
#define GRPC_plugin_5fgrpc_2eproto__INCLUDED

#include "plugin_grpc.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace plugin_grpc {

class NodeInterface final {
 public:
  static constexpr char const* service_full_name() {
    return "plugin_grpc.NodeInterface";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::plugin_grpc::Message>> Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::plugin_grpc::Message>>(MessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>> AsyncMessages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>>(AsyncMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>> PrepareAsyncMessages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>>(PrepareAsyncMessagesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::plugin_grpc::GetBlockResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>> AsyncGetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>>(AsyncGetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>> PrepareAsyncGetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>>(PrepareAsyncGetBlockRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::plugin_grpc::GetBlockUndoDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>> AsyncGetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>>(AsyncGetBlockUndoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>> PrepareAsyncGetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>>(PrepareAsyncGetBlockUndoDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::plugin_grpc::GetMempoolResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>> AsyncGetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>>(AsyncGetMempoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>> PrepareAsyncGetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>>(PrepareAsyncGetMempoolRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::ClientReadReactor< ::plugin_grpc::Message>* reactor) = 0;
      #else
      virtual void Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::experimental::ClientReadReactor< ::plugin_grpc::Message>* reactor) = 0;
      #endif
      virtual void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::plugin_grpc::Message>* MessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>* AsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::plugin_grpc::Message>* PrepareAsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>* AsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockResponse>* PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>* AsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetBlockUndoDataResponse>* PrepareAsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>* AsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::plugin_grpc::GetMempoolResponse>* PrepareAsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::plugin_grpc::Message>> Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::plugin_grpc::Message>>(MessagesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::plugin_grpc::Message>> AsyncMessages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::plugin_grpc::Message>>(AsyncMessagesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::plugin_grpc::Message>> PrepareAsyncMessages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::plugin_grpc::Message>>(PrepareAsyncMessagesRaw(context, request, cq));
    }
    ::grpc::Status GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::plugin_grpc::GetBlockResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>> AsyncGetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>>(AsyncGetBlockRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>> PrepareAsyncGetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>>(PrepareAsyncGetBlockRaw(context, request, cq));
    }
    ::grpc::Status GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::plugin_grpc::GetBlockUndoDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>> AsyncGetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>>(AsyncGetBlockUndoDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>> PrepareAsyncGetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>>(PrepareAsyncGetBlockUndoDataRaw(context, request, cq));
    }
    ::grpc::Status GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::plugin_grpc::GetMempoolResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>> AsyncGetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>>(AsyncGetMempoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>> PrepareAsyncGetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>>(PrepareAsyncGetMempoolRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::ClientReadReactor< ::plugin_grpc::Message>* reactor) override;
      #else
      void Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::experimental::ClientReadReactor< ::plugin_grpc::Message>* reactor) override;
      #endif
      void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::plugin_grpc::Message>* MessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request) override;
    ::grpc::ClientAsyncReader< ::plugin_grpc::Message>* AsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::plugin_grpc::Message>* PrepareAsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>* AsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>* PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>* AsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>* PrepareAsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>* AsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>* PrepareAsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Messages_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlock_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBlockUndoData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMempool_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Messages(::grpc::ServerContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::ServerWriter< ::plugin_grpc::Message>* writer);
    virtual ::grpc::Status GetBlock(::grpc::ServerContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response);
    virtual ::grpc::Status GetBlockUndoData(::grpc::ServerContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response);
    virtual ::grpc::Status GetMempool(::grpc::ServerContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Messages() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessages(::grpc::ServerContext* context, ::plugin_grpc::MessageSubscribeTo* request, ::grpc::ServerAsyncWriter< ::plugin_grpc::Message>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlock() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlock(::grpc::ServerContext* context, ::plugin_grpc::GetBlockRequest* request, ::grpc::ServerAsyncResponseWriter< ::plugin_grpc::GetBlockResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBlockUndoData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockUndoData(::grpc::ServerContext* context, ::plugin_grpc::GetBlockUndoDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::plugin_grpc::GetBlockUndoDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMempool() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMempool(::grpc::ServerContext* context, ::plugin_grpc::GetMempoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::plugin_grpc::GetMempoolResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Messages<WithAsyncMethod_GetBlock<WithAsyncMethod_GetBlockUndoData<WithAsyncMethod_GetMempool<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Messages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::plugin_grpc::MessageSubscribeTo, ::plugin_grpc::Message>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plugin_grpc::MessageSubscribeTo* request) { return this->Messages(context, request); }));
    }
    ~ExperimentalWithCallbackMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::plugin_grpc::Message>* Messages(
      ::grpc::CallbackServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::plugin_grpc::Message>* Messages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response) { return this->GetBlock(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlock(
        ::grpc::experimental::MessageAllocator< ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetBlockUndoData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response) { return this->GetBlockUndoData(context, request, response); }));}
    void SetMessageAllocatorFor_GetBlockUndoData(
        ::grpc::experimental::MessageAllocator< ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockUndoData(
      ::grpc::CallbackServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockUndoData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_GetMempool() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response) { return this->GetMempool(context, request, response); }));}
    void SetMessageAllocatorFor_GetMempool(
        ::grpc::experimental::MessageAllocator< ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMempool(
      ::grpc::CallbackServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMempool(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_Messages<ExperimentalWithCallbackMethod_GetBlock<ExperimentalWithCallbackMethod_GetBlockUndoData<ExperimentalWithCallbackMethod_GetMempool<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_Messages<ExperimentalWithCallbackMethod_GetBlock<ExperimentalWithCallbackMethod_GetBlockUndoData<ExperimentalWithCallbackMethod_GetMempool<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Messages() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlock() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBlockUndoData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMempool() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Messages() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMessages(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlock() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlock(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBlockUndoData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBlockUndoData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMempool() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMempool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Messages() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const::grpc::ByteBuffer* request) { return this->Messages(context, request); }));
    }
    ~ExperimentalWithRawCallbackMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Messages(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #else
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer>* Messages(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlock() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlock(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlock(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlock(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetBlockUndoData() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBlockUndoData(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetBlockUndoData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetBlockUndoData(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_GetMempool() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMempool(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* GetMempool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* GetMempool(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlock : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlock() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse>* streamer) {
                       return this->StreamedGetBlock(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlock() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlock(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockRequest* /*request*/, ::plugin_grpc::GetBlockResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlock(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plugin_grpc::GetBlockRequest,::plugin_grpc::GetBlockResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBlockUndoData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBlockUndoData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse>* streamer) {
                       return this->StreamedGetBlockUndoData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBlockUndoData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBlockUndoData(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetBlockUndoDataRequest* /*request*/, ::plugin_grpc::GetBlockUndoDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBlockUndoData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plugin_grpc::GetBlockUndoDataRequest,::plugin_grpc::GetBlockUndoDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMempool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMempool() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse>* streamer) {
                       return this->StreamedGetMempool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMempool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMempool(::grpc::ServerContext* /*context*/, const ::plugin_grpc::GetMempoolRequest* /*request*/, ::plugin_grpc::GetMempoolResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMempool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::plugin_grpc::GetMempoolRequest,::plugin_grpc::GetMempoolResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetBlock<WithStreamedUnaryMethod_GetBlockUndoData<WithStreamedUnaryMethod_GetMempool<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Messages : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Messages() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::plugin_grpc::MessageSubscribeTo, ::plugin_grpc::Message>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::plugin_grpc::MessageSubscribeTo, ::plugin_grpc::Message>* streamer) {
                       return this->StreamedMessages(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Messages() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Messages(::grpc::ServerContext* /*context*/, const ::plugin_grpc::MessageSubscribeTo* /*request*/, ::grpc::ServerWriter< ::plugin_grpc::Message>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedMessages(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::plugin_grpc::MessageSubscribeTo,::plugin_grpc::Message>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Messages<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Messages<WithStreamedUnaryMethod_GetBlock<WithStreamedUnaryMethod_GetBlockUndoData<WithStreamedUnaryMethod_GetMempool<Service > > > > StreamedService;
};

}  // namespace plugin_grpc


#endif  // GRPC_plugin_5fgrpc_2eproto__INCLUDED
