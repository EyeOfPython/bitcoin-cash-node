// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: plugin_grpc.proto

#include "plugin_grpc.pb.h"
#include "plugin_grpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace plugin_grpc {

static const char* NodeInterface_method_names[] = {
  "/plugin_grpc.NodeInterface/Messages",
  "/plugin_grpc.NodeInterface/GetBlock",
  "/plugin_grpc.NodeInterface/GetBlockUndoData",
  "/plugin_grpc.NodeInterface/GetMempool",
};

std::unique_ptr< NodeInterface::Stub> NodeInterface::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NodeInterface::Stub> stub(new NodeInterface::Stub(channel));
  return stub;
}

NodeInterface::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Messages_(NodeInterface_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetBlock_(NodeInterface_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBlockUndoData_(NodeInterface_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetMempool_(NodeInterface_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::plugin_grpc::Message>* NodeInterface::Stub::MessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request) {
  return ::grpc::internal::ClientReaderFactory< ::plugin_grpc::Message>::Create(channel_.get(), rpcmethod_Messages_, context, request);
}

void NodeInterface::Stub::experimental_async::Messages(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::experimental::ClientReadReactor< ::plugin_grpc::Message>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::plugin_grpc::Message>::Create(stub_->channel_.get(), stub_->rpcmethod_Messages_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::plugin_grpc::Message>* NodeInterface::Stub::AsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::plugin_grpc::Message>::Create(channel_.get(), cq, rpcmethod_Messages_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::plugin_grpc::Message>* NodeInterface::Stub::PrepareAsyncMessagesRaw(::grpc::ClientContext* context, const ::plugin_grpc::MessageSubscribeTo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::plugin_grpc::Message>::Create(channel_.get(), cq, rpcmethod_Messages_, context, request, false, nullptr);
}

::grpc::Status NodeInterface::Stub::GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::plugin_grpc::GetBlockResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlock_, context, request, response);
}

void NodeInterface::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, std::move(f));
}

void NodeInterface::Stub::experimental_async::GetBlock(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlock_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>* NodeInterface::Stub::PrepareAsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::plugin_grpc::GetBlockResponse, ::plugin_grpc::GetBlockRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlock_, context, request);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockResponse>* NodeInterface::Stub::AsyncGetBlockRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeInterface::Stub::GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::plugin_grpc::GetBlockUndoDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBlockUndoData_, context, request, response);
}

void NodeInterface::Stub::experimental_async::GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockUndoData_, context, request, response, std::move(f));
}

void NodeInterface::Stub::experimental_async::GetBlockUndoData(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBlockUndoData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>* NodeInterface::Stub::PrepareAsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::plugin_grpc::GetBlockUndoDataResponse, ::plugin_grpc::GetBlockUndoDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBlockUndoData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetBlockUndoDataResponse>* NodeInterface::Stub::AsyncGetBlockUndoDataRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetBlockUndoDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBlockUndoDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeInterface::Stub::GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::plugin_grpc::GetMempoolResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMempool_, context, request, response);
}

void NodeInterface::Stub::experimental_async::GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMempool_, context, request, response, std::move(f));
}

void NodeInterface::Stub::experimental_async::GetMempool(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMempool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>* NodeInterface::Stub::PrepareAsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::plugin_grpc::GetMempoolResponse, ::plugin_grpc::GetMempoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMempool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::plugin_grpc::GetMempoolResponse>* NodeInterface::Stub::AsyncGetMempoolRaw(::grpc::ClientContext* context, const ::plugin_grpc::GetMempoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMempoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

NodeInterface::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeInterface_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NodeInterface::Service, ::plugin_grpc::MessageSubscribeTo, ::plugin_grpc::Message>(
          [](NodeInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plugin_grpc::MessageSubscribeTo* req,
             ::grpc::ServerWriter<::plugin_grpc::Message>* writer) {
               return service->Messages(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeInterface_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeInterface::Service, ::plugin_grpc::GetBlockRequest, ::plugin_grpc::GetBlockResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plugin_grpc::GetBlockRequest* req,
             ::plugin_grpc::GetBlockResponse* resp) {
               return service->GetBlock(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeInterface_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeInterface::Service, ::plugin_grpc::GetBlockUndoDataRequest, ::plugin_grpc::GetBlockUndoDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plugin_grpc::GetBlockUndoDataRequest* req,
             ::plugin_grpc::GetBlockUndoDataResponse* resp) {
               return service->GetBlockUndoData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeInterface_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeInterface::Service, ::plugin_grpc::GetMempoolRequest, ::plugin_grpc::GetMempoolResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeInterface::Service* service,
             ::grpc::ServerContext* ctx,
             const ::plugin_grpc::GetMempoolRequest* req,
             ::plugin_grpc::GetMempoolResponse* resp) {
               return service->GetMempool(ctx, req, resp);
             }, this)));
}

NodeInterface::Service::~Service() {
}

::grpc::Status NodeInterface::Service::Messages(::grpc::ServerContext* context, const ::plugin_grpc::MessageSubscribeTo* request, ::grpc::ServerWriter< ::plugin_grpc::Message>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeInterface::Service::GetBlock(::grpc::ServerContext* context, const ::plugin_grpc::GetBlockRequest* request, ::plugin_grpc::GetBlockResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeInterface::Service::GetBlockUndoData(::grpc::ServerContext* context, const ::plugin_grpc::GetBlockUndoDataRequest* request, ::plugin_grpc::GetBlockUndoDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeInterface::Service::GetMempool(::grpc::ServerContext* context, const ::plugin_grpc::GetMempoolRequest* request, ::plugin_grpc::GetMempoolResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace plugin_grpc

