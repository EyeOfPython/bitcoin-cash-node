// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugin_grpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_plugin_5fgrpc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_plugin_5fgrpc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_plugin_5fgrpc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_plugin_5fgrpc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plugin_5fgrpc_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(int index);
namespace plugin_grpc {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class BlockChecked;
struct BlockCheckedDefaultTypeInternal;
extern BlockCheckedDefaultTypeInternal _BlockChecked_default_instance_;
class BlockConnected;
struct BlockConnectedDefaultTypeInternal;
extern BlockConnectedDefaultTypeInternal _BlockConnected_default_instance_;
class BlockDisconnected;
struct BlockDisconnectedDefaultTypeInternal;
extern BlockDisconnectedDefaultTypeInternal _BlockDisconnected_default_instance_;
class BlockIdentifier;
struct BlockIdentifierDefaultTypeInternal;
extern BlockIdentifierDefaultTypeInternal _BlockIdentifier_default_instance_;
class BlockMetadata;
struct BlockMetadataDefaultTypeInternal;
extern BlockMetadataDefaultTypeInternal _BlockMetadata_default_instance_;
class BlockValidationState;
struct BlockValidationStateDefaultTypeInternal;
extern BlockValidationStateDefaultTypeInternal _BlockValidationState_default_instance_;
class ChainStateFlushed;
struct ChainStateFlushedDefaultTypeInternal;
extern ChainStateFlushedDefaultTypeInternal _ChainStateFlushed_default_instance_;
class Coin;
struct CoinDefaultTypeInternal;
extern CoinDefaultTypeInternal _Coin_default_instance_;
class GetBlockRequest;
struct GetBlockRequestDefaultTypeInternal;
extern GetBlockRequestDefaultTypeInternal _GetBlockRequest_default_instance_;
class GetBlockResponse;
struct GetBlockResponseDefaultTypeInternal;
extern GetBlockResponseDefaultTypeInternal _GetBlockResponse_default_instance_;
class GetBlockUndoDataRequest;
struct GetBlockUndoDataRequestDefaultTypeInternal;
extern GetBlockUndoDataRequestDefaultTypeInternal _GetBlockUndoDataRequest_default_instance_;
class GetBlockUndoDataResponse;
struct GetBlockUndoDataResponseDefaultTypeInternal;
extern GetBlockUndoDataResponseDefaultTypeInternal _GetBlockUndoDataResponse_default_instance_;
class GetMempoolRequest;
struct GetMempoolRequestDefaultTypeInternal;
extern GetMempoolRequestDefaultTypeInternal _GetMempoolRequest_default_instance_;
class GetMempoolResponse;
struct GetMempoolResponseDefaultTypeInternal;
extern GetMempoolResponseDefaultTypeInternal _GetMempoolResponse_default_instance_;
class MempoolTx;
struct MempoolTxDefaultTypeInternal;
extern MempoolTxDefaultTypeInternal _MempoolTx_default_instance_;
class Message;
struct MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageSubscribeTo;
struct MessageSubscribeToDefaultTypeInternal;
extern MessageSubscribeToDefaultTypeInternal _MessageSubscribeTo_default_instance_;
class NewPoWValidBlock;
struct NewPoWValidBlockDefaultTypeInternal;
extern NewPoWValidBlockDefaultTypeInternal _NewPoWValidBlock_default_instance_;
class TransactionAddedToMempool;
struct TransactionAddedToMempoolDefaultTypeInternal;
extern TransactionAddedToMempoolDefaultTypeInternal _TransactionAddedToMempool_default_instance_;
class TransactionRemovedFromMempool;
struct TransactionRemovedFromMempoolDefaultTypeInternal;
extern TransactionRemovedFromMempoolDefaultTypeInternal _TransactionRemovedFromMempool_default_instance_;
class UpdatedBlockTip;
struct UpdatedBlockTipDefaultTypeInternal;
extern UpdatedBlockTipDefaultTypeInternal _UpdatedBlockTip_default_instance_;
}  // namespace plugin_grpc
PROTOBUF_NAMESPACE_OPEN
template<> ::plugin_grpc::Block* Arena::CreateMaybeMessage<::plugin_grpc::Block>(Arena*);
template<> ::plugin_grpc::BlockChecked* Arena::CreateMaybeMessage<::plugin_grpc::BlockChecked>(Arena*);
template<> ::plugin_grpc::BlockConnected* Arena::CreateMaybeMessage<::plugin_grpc::BlockConnected>(Arena*);
template<> ::plugin_grpc::BlockDisconnected* Arena::CreateMaybeMessage<::plugin_grpc::BlockDisconnected>(Arena*);
template<> ::plugin_grpc::BlockIdentifier* Arena::CreateMaybeMessage<::plugin_grpc::BlockIdentifier>(Arena*);
template<> ::plugin_grpc::BlockMetadata* Arena::CreateMaybeMessage<::plugin_grpc::BlockMetadata>(Arena*);
template<> ::plugin_grpc::BlockValidationState* Arena::CreateMaybeMessage<::plugin_grpc::BlockValidationState>(Arena*);
template<> ::plugin_grpc::ChainStateFlushed* Arena::CreateMaybeMessage<::plugin_grpc::ChainStateFlushed>(Arena*);
template<> ::plugin_grpc::Coin* Arena::CreateMaybeMessage<::plugin_grpc::Coin>(Arena*);
template<> ::plugin_grpc::GetBlockRequest* Arena::CreateMaybeMessage<::plugin_grpc::GetBlockRequest>(Arena*);
template<> ::plugin_grpc::GetBlockResponse* Arena::CreateMaybeMessage<::plugin_grpc::GetBlockResponse>(Arena*);
template<> ::plugin_grpc::GetBlockUndoDataRequest* Arena::CreateMaybeMessage<::plugin_grpc::GetBlockUndoDataRequest>(Arena*);
template<> ::plugin_grpc::GetBlockUndoDataResponse* Arena::CreateMaybeMessage<::plugin_grpc::GetBlockUndoDataResponse>(Arena*);
template<> ::plugin_grpc::GetMempoolRequest* Arena::CreateMaybeMessage<::plugin_grpc::GetMempoolRequest>(Arena*);
template<> ::plugin_grpc::GetMempoolResponse* Arena::CreateMaybeMessage<::plugin_grpc::GetMempoolResponse>(Arena*);
template<> ::plugin_grpc::MempoolTx* Arena::CreateMaybeMessage<::plugin_grpc::MempoolTx>(Arena*);
template<> ::plugin_grpc::Message* Arena::CreateMaybeMessage<::plugin_grpc::Message>(Arena*);
template<> ::plugin_grpc::MessageSubscribeTo* Arena::CreateMaybeMessage<::plugin_grpc::MessageSubscribeTo>(Arena*);
template<> ::plugin_grpc::NewPoWValidBlock* Arena::CreateMaybeMessage<::plugin_grpc::NewPoWValidBlock>(Arena*);
template<> ::plugin_grpc::TransactionAddedToMempool* Arena::CreateMaybeMessage<::plugin_grpc::TransactionAddedToMempool>(Arena*);
template<> ::plugin_grpc::TransactionRemovedFromMempool* Arena::CreateMaybeMessage<::plugin_grpc::TransactionRemovedFromMempool>(Arena*);
template<> ::plugin_grpc::UpdatedBlockTip* Arena::CreateMaybeMessage<::plugin_grpc::UpdatedBlockTip>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace plugin_grpc {

// ===================================================================

class MessageSubscribeTo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.MessageSubscribeTo) */ {
 public:
  inline MessageSubscribeTo() : MessageSubscribeTo(nullptr) {}
  virtual ~MessageSubscribeTo();
  explicit constexpr MessageSubscribeTo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageSubscribeTo(const MessageSubscribeTo& from);
  MessageSubscribeTo(MessageSubscribeTo&& from) noexcept
    : MessageSubscribeTo() {
    *this = ::std::move(from);
  }

  inline MessageSubscribeTo& operator=(const MessageSubscribeTo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageSubscribeTo& operator=(MessageSubscribeTo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageSubscribeTo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageSubscribeTo* internal_default_instance() {
    return reinterpret_cast<const MessageSubscribeTo*>(
               &_MessageSubscribeTo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageSubscribeTo& a, MessageSubscribeTo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageSubscribeTo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageSubscribeTo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageSubscribeTo* New() const final {
    return CreateMaybeMessage<MessageSubscribeTo>(nullptr);
  }

  MessageSubscribeTo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageSubscribeTo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageSubscribeTo& from);
  void MergeFrom(const MessageSubscribeTo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageSubscribeTo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.MessageSubscribeTo";
  }
  protected:
  explicit MessageSubscribeTo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedBlockTipFieldNumber = 1,
    kTransactionAddedToMempoolFieldNumber = 2,
    kTransactionRemovedFromMempoolFieldNumber = 3,
    kBlockConnectedFieldNumber = 4,
    kBlockDisconnectedFieldNumber = 5,
    kChainStateFlushedFieldNumber = 6,
    kBlockCheckedFieldNumber = 7,
    kNewPowValidBlockFieldNumber = 8,
  };
  // bool updated_block_tip = 1;
  void clear_updated_block_tip();
  bool updated_block_tip() const;
  void set_updated_block_tip(bool value);
  private:
  bool _internal_updated_block_tip() const;
  void _internal_set_updated_block_tip(bool value);
  public:

  // bool transaction_added_to_mempool = 2;
  void clear_transaction_added_to_mempool();
  bool transaction_added_to_mempool() const;
  void set_transaction_added_to_mempool(bool value);
  private:
  bool _internal_transaction_added_to_mempool() const;
  void _internal_set_transaction_added_to_mempool(bool value);
  public:

  // bool transaction_removed_from_mempool = 3;
  void clear_transaction_removed_from_mempool();
  bool transaction_removed_from_mempool() const;
  void set_transaction_removed_from_mempool(bool value);
  private:
  bool _internal_transaction_removed_from_mempool() const;
  void _internal_set_transaction_removed_from_mempool(bool value);
  public:

  // bool block_connected = 4;
  void clear_block_connected();
  bool block_connected() const;
  void set_block_connected(bool value);
  private:
  bool _internal_block_connected() const;
  void _internal_set_block_connected(bool value);
  public:

  // bool block_disconnected = 5;
  void clear_block_disconnected();
  bool block_disconnected() const;
  void set_block_disconnected(bool value);
  private:
  bool _internal_block_disconnected() const;
  void _internal_set_block_disconnected(bool value);
  public:

  // bool chain_state_flushed = 6;
  void clear_chain_state_flushed();
  bool chain_state_flushed() const;
  void set_chain_state_flushed(bool value);
  private:
  bool _internal_chain_state_flushed() const;
  void _internal_set_chain_state_flushed(bool value);
  public:

  // bool block_checked = 7;
  void clear_block_checked();
  bool block_checked() const;
  void set_block_checked(bool value);
  private:
  bool _internal_block_checked() const;
  void _internal_set_block_checked(bool value);
  public:

  // bool new_pow_valid_block = 8;
  void clear_new_pow_valid_block();
  bool new_pow_valid_block() const;
  void set_new_pow_valid_block(bool value);
  private:
  bool _internal_new_pow_valid_block() const;
  void _internal_set_new_pow_valid_block(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.MessageSubscribeTo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool updated_block_tip_;
  bool transaction_added_to_mempool_;
  bool transaction_removed_from_mempool_;
  bool block_connected_;
  bool block_disconnected_;
  bool chain_state_flushed_;
  bool block_checked_;
  bool new_pow_valid_block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();
  explicit constexpr Message(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance() {
    return *internal_default_instance();
  }
  enum MessageCase {
    kUpdatedBlockTip = 1,
    kTransactionAddedToMempool = 2,
    kTransactionRemovedFromMempool = 3,
    kBlockConnected = 4,
    kBlockDisconnected = 5,
    kChainStateFlushed = 6,
    kBlockChecked = 7,
    kNewPowValidBlock = 8,
    MESSAGE_NOT_SET = 0,
  };

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatedBlockTipFieldNumber = 1,
    kTransactionAddedToMempoolFieldNumber = 2,
    kTransactionRemovedFromMempoolFieldNumber = 3,
    kBlockConnectedFieldNumber = 4,
    kBlockDisconnectedFieldNumber = 5,
    kChainStateFlushedFieldNumber = 6,
    kBlockCheckedFieldNumber = 7,
    kNewPowValidBlockFieldNumber = 8,
  };
  // .plugin_grpc.UpdatedBlockTip updated_block_tip = 1;
  bool has_updated_block_tip() const;
  private:
  bool _internal_has_updated_block_tip() const;
  public:
  void clear_updated_block_tip();
  const ::plugin_grpc::UpdatedBlockTip& updated_block_tip() const;
  ::plugin_grpc::UpdatedBlockTip* release_updated_block_tip();
  ::plugin_grpc::UpdatedBlockTip* mutable_updated_block_tip();
  void set_allocated_updated_block_tip(::plugin_grpc::UpdatedBlockTip* updated_block_tip);
  private:
  const ::plugin_grpc::UpdatedBlockTip& _internal_updated_block_tip() const;
  ::plugin_grpc::UpdatedBlockTip* _internal_mutable_updated_block_tip();
  public:
  void unsafe_arena_set_allocated_updated_block_tip(
      ::plugin_grpc::UpdatedBlockTip* updated_block_tip);
  ::plugin_grpc::UpdatedBlockTip* unsafe_arena_release_updated_block_tip();

  // .plugin_grpc.TransactionAddedToMempool transaction_added_to_mempool = 2;
  bool has_transaction_added_to_mempool() const;
  private:
  bool _internal_has_transaction_added_to_mempool() const;
  public:
  void clear_transaction_added_to_mempool();
  const ::plugin_grpc::TransactionAddedToMempool& transaction_added_to_mempool() const;
  ::plugin_grpc::TransactionAddedToMempool* release_transaction_added_to_mempool();
  ::plugin_grpc::TransactionAddedToMempool* mutable_transaction_added_to_mempool();
  void set_allocated_transaction_added_to_mempool(::plugin_grpc::TransactionAddedToMempool* transaction_added_to_mempool);
  private:
  const ::plugin_grpc::TransactionAddedToMempool& _internal_transaction_added_to_mempool() const;
  ::plugin_grpc::TransactionAddedToMempool* _internal_mutable_transaction_added_to_mempool();
  public:
  void unsafe_arena_set_allocated_transaction_added_to_mempool(
      ::plugin_grpc::TransactionAddedToMempool* transaction_added_to_mempool);
  ::plugin_grpc::TransactionAddedToMempool* unsafe_arena_release_transaction_added_to_mempool();

  // .plugin_grpc.TransactionRemovedFromMempool transaction_removed_from_mempool = 3;
  bool has_transaction_removed_from_mempool() const;
  private:
  bool _internal_has_transaction_removed_from_mempool() const;
  public:
  void clear_transaction_removed_from_mempool();
  const ::plugin_grpc::TransactionRemovedFromMempool& transaction_removed_from_mempool() const;
  ::plugin_grpc::TransactionRemovedFromMempool* release_transaction_removed_from_mempool();
  ::plugin_grpc::TransactionRemovedFromMempool* mutable_transaction_removed_from_mempool();
  void set_allocated_transaction_removed_from_mempool(::plugin_grpc::TransactionRemovedFromMempool* transaction_removed_from_mempool);
  private:
  const ::plugin_grpc::TransactionRemovedFromMempool& _internal_transaction_removed_from_mempool() const;
  ::plugin_grpc::TransactionRemovedFromMempool* _internal_mutable_transaction_removed_from_mempool();
  public:
  void unsafe_arena_set_allocated_transaction_removed_from_mempool(
      ::plugin_grpc::TransactionRemovedFromMempool* transaction_removed_from_mempool);
  ::plugin_grpc::TransactionRemovedFromMempool* unsafe_arena_release_transaction_removed_from_mempool();

  // .plugin_grpc.BlockConnected block_connected = 4;
  bool has_block_connected() const;
  private:
  bool _internal_has_block_connected() const;
  public:
  void clear_block_connected();
  const ::plugin_grpc::BlockConnected& block_connected() const;
  ::plugin_grpc::BlockConnected* release_block_connected();
  ::plugin_grpc::BlockConnected* mutable_block_connected();
  void set_allocated_block_connected(::plugin_grpc::BlockConnected* block_connected);
  private:
  const ::plugin_grpc::BlockConnected& _internal_block_connected() const;
  ::plugin_grpc::BlockConnected* _internal_mutable_block_connected();
  public:
  void unsafe_arena_set_allocated_block_connected(
      ::plugin_grpc::BlockConnected* block_connected);
  ::plugin_grpc::BlockConnected* unsafe_arena_release_block_connected();

  // .plugin_grpc.BlockDisconnected block_disconnected = 5;
  bool has_block_disconnected() const;
  private:
  bool _internal_has_block_disconnected() const;
  public:
  void clear_block_disconnected();
  const ::plugin_grpc::BlockDisconnected& block_disconnected() const;
  ::plugin_grpc::BlockDisconnected* release_block_disconnected();
  ::plugin_grpc::BlockDisconnected* mutable_block_disconnected();
  void set_allocated_block_disconnected(::plugin_grpc::BlockDisconnected* block_disconnected);
  private:
  const ::plugin_grpc::BlockDisconnected& _internal_block_disconnected() const;
  ::plugin_grpc::BlockDisconnected* _internal_mutable_block_disconnected();
  public:
  void unsafe_arena_set_allocated_block_disconnected(
      ::plugin_grpc::BlockDisconnected* block_disconnected);
  ::plugin_grpc::BlockDisconnected* unsafe_arena_release_block_disconnected();

  // .plugin_grpc.ChainStateFlushed chain_state_flushed = 6;
  bool has_chain_state_flushed() const;
  private:
  bool _internal_has_chain_state_flushed() const;
  public:
  void clear_chain_state_flushed();
  const ::plugin_grpc::ChainStateFlushed& chain_state_flushed() const;
  ::plugin_grpc::ChainStateFlushed* release_chain_state_flushed();
  ::plugin_grpc::ChainStateFlushed* mutable_chain_state_flushed();
  void set_allocated_chain_state_flushed(::plugin_grpc::ChainStateFlushed* chain_state_flushed);
  private:
  const ::plugin_grpc::ChainStateFlushed& _internal_chain_state_flushed() const;
  ::plugin_grpc::ChainStateFlushed* _internal_mutable_chain_state_flushed();
  public:
  void unsafe_arena_set_allocated_chain_state_flushed(
      ::plugin_grpc::ChainStateFlushed* chain_state_flushed);
  ::plugin_grpc::ChainStateFlushed* unsafe_arena_release_chain_state_flushed();

  // .plugin_grpc.BlockChecked block_checked = 7;
  bool has_block_checked() const;
  private:
  bool _internal_has_block_checked() const;
  public:
  void clear_block_checked();
  const ::plugin_grpc::BlockChecked& block_checked() const;
  ::plugin_grpc::BlockChecked* release_block_checked();
  ::plugin_grpc::BlockChecked* mutable_block_checked();
  void set_allocated_block_checked(::plugin_grpc::BlockChecked* block_checked);
  private:
  const ::plugin_grpc::BlockChecked& _internal_block_checked() const;
  ::plugin_grpc::BlockChecked* _internal_mutable_block_checked();
  public:
  void unsafe_arena_set_allocated_block_checked(
      ::plugin_grpc::BlockChecked* block_checked);
  ::plugin_grpc::BlockChecked* unsafe_arena_release_block_checked();

  // .plugin_grpc.NewPoWValidBlock new_pow_valid_block = 8;
  bool has_new_pow_valid_block() const;
  private:
  bool _internal_has_new_pow_valid_block() const;
  public:
  void clear_new_pow_valid_block();
  const ::plugin_grpc::NewPoWValidBlock& new_pow_valid_block() const;
  ::plugin_grpc::NewPoWValidBlock* release_new_pow_valid_block();
  ::plugin_grpc::NewPoWValidBlock* mutable_new_pow_valid_block();
  void set_allocated_new_pow_valid_block(::plugin_grpc::NewPoWValidBlock* new_pow_valid_block);
  private:
  const ::plugin_grpc::NewPoWValidBlock& _internal_new_pow_valid_block() const;
  ::plugin_grpc::NewPoWValidBlock* _internal_mutable_new_pow_valid_block();
  public:
  void unsafe_arena_set_allocated_new_pow_valid_block(
      ::plugin_grpc::NewPoWValidBlock* new_pow_valid_block);
  ::plugin_grpc::NewPoWValidBlock* unsafe_arena_release_new_pow_valid_block();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:plugin_grpc.Message)
 private:
  class _Internal;
  void set_has_updated_block_tip();
  void set_has_transaction_added_to_mempool();
  void set_has_transaction_removed_from_mempool();
  void set_has_block_connected();
  void set_has_block_disconnected();
  void set_has_chain_state_flushed();
  void set_has_block_checked();
  void set_has_new_pow_valid_block();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    constexpr MessageUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::plugin_grpc::UpdatedBlockTip* updated_block_tip_;
    ::plugin_grpc::TransactionAddedToMempool* transaction_added_to_mempool_;
    ::plugin_grpc::TransactionRemovedFromMempool* transaction_removed_from_mempool_;
    ::plugin_grpc::BlockConnected* block_connected_;
    ::plugin_grpc::BlockDisconnected* block_disconnected_;
    ::plugin_grpc::ChainStateFlushed* chain_state_flushed_;
    ::plugin_grpc::BlockChecked* block_checked_;
    ::plugin_grpc::NewPoWValidBlock* new_pow_valid_block_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  virtual ~Block();
  explicit constexpr Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kTxsFieldNumber = 3,
    kHeaderFieldNumber = 1,
  };
  // repeated .plugin_grpc.BlockMetadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::plugin_grpc::BlockMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >*
      mutable_metadata();
  private:
  const ::plugin_grpc::BlockMetadata& _internal_metadata(int index) const;
  ::plugin_grpc::BlockMetadata* _internal_add_metadata();
  public:
  const ::plugin_grpc::BlockMetadata& metadata(int index) const;
  ::plugin_grpc::BlockMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >&
      metadata() const;

  // repeated bytes txs = 3;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  const std::string& txs(int index) const;
  std::string* mutable_txs(int index);
  void set_txs(int index, const std::string& value);
  void set_txs(int index, std::string&& value);
  void set_txs(int index, const char* value);
  void set_txs(int index, const void* value, size_t size);
  std::string* add_txs();
  void add_txs(const std::string& value);
  void add_txs(std::string&& value);
  void add_txs(const char* value);
  void add_txs(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txs();
  private:
  const std::string& _internal_txs(int index) const;
  std::string* _internal_add_txs();
  public:

  // bytes header = 1;
  void clear_header();
  const std::string& header() const;
  void set_header(const std::string& value);
  void set_header(std::string&& value);
  void set_header(const char* value);
  void set_header(const void* value, size_t size);
  std::string* mutable_header();
  std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata > metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class Coin PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.Coin) */ {
 public:
  inline Coin() : Coin(nullptr) {}
  virtual ~Coin();
  explicit constexpr Coin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coin(const Coin& from);
  Coin(Coin&& from) noexcept
    : Coin() {
    *this = ::std::move(from);
  }

  inline Coin& operator=(const Coin& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coin& operator=(Coin&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coin& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coin* internal_default_instance() {
    return reinterpret_cast<const Coin*>(
               &_Coin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Coin& a, Coin& b) {
    a.Swap(&b);
  }
  inline void Swap(Coin* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coin* New() const final {
    return CreateMaybeMessage<Coin>(nullptr);
  }

  Coin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coin& from);
  void MergeFrom(const Coin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.Coin";
  }
  protected:
  explicit Coin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptFieldNumber = 2,
    kAmountFieldNumber = 1,
    kHeightFieldNumber = 3,
    kIsCoinbaseFieldNumber = 4,
  };
  // bytes script = 2;
  void clear_script();
  const std::string& script() const;
  void set_script(const std::string& value);
  void set_script(std::string&& value);
  void set_script(const char* value);
  void set_script(const void* value, size_t size);
  std::string* mutable_script();
  std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // uint64 amount = 1;
  void clear_amount();
  ::PROTOBUF_NAMESPACE_ID::uint64 amount() const;
  void set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amount() const;
  void _internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_coinbase = 4;
  void clear_is_coinbase();
  bool is_coinbase() const;
  void set_is_coinbase(bool value);
  private:
  bool _internal_is_coinbase() const;
  void _internal_set_is_coinbase(bool value);
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.Coin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
  ::PROTOBUF_NAMESPACE_ID::uint64 amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  bool is_coinbase_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockMetadata) */ {
 public:
  inline BlockMetadata() : BlockMetadata(nullptr) {}
  virtual ~BlockMetadata();
  explicit constexpr BlockMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockMetadata(const BlockMetadata& from);
  BlockMetadata(BlockMetadata&& from) noexcept
    : BlockMetadata() {
    *this = ::std::move(from);
  }

  inline BlockMetadata& operator=(const BlockMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockMetadata& operator=(BlockMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockMetadata* internal_default_instance() {
    return reinterpret_cast<const BlockMetadata*>(
               &_BlockMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BlockMetadata& a, BlockMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockMetadata* New() const final {
    return CreateMaybeMessage<BlockMetadata>(nullptr);
  }

  BlockMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockMetadata& from);
  void MergeFrom(const BlockMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockMetadata";
  }
  protected:
  explicit BlockMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldValueFieldNumber = 2,
    kFieldIdFieldNumber = 1,
  };
  // bytes field_value = 2;
  void clear_field_value();
  const std::string& field_value() const;
  void set_field_value(const std::string& value);
  void set_field_value(std::string&& value);
  void set_field_value(const char* value);
  void set_field_value(const void* value, size_t size);
  std::string* mutable_field_value();
  std::string* release_field_value();
  void set_allocated_field_value(std::string* field_value);
  private:
  const std::string& _internal_field_value() const;
  void _internal_set_field_value(const std::string& value);
  std::string* _internal_mutable_field_value();
  public:

  // uint32 field_id = 1;
  void clear_field_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id() const;
  void set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_field_id() const;
  void _internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 field_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockIdentifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockIdentifier) */ {
 public:
  inline BlockIdentifier() : BlockIdentifier(nullptr) {}
  virtual ~BlockIdentifier();
  explicit constexpr BlockIdentifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockIdentifier(const BlockIdentifier& from);
  BlockIdentifier(BlockIdentifier&& from) noexcept
    : BlockIdentifier() {
    *this = ::std::move(from);
  }

  inline BlockIdentifier& operator=(const BlockIdentifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockIdentifier& operator=(BlockIdentifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockIdentifier& default_instance() {
    return *internal_default_instance();
  }
  enum IdCase {
    kHeight = 1,
    kBlockhash = 2,
    ID_NOT_SET = 0,
  };

  static inline const BlockIdentifier* internal_default_instance() {
    return reinterpret_cast<const BlockIdentifier*>(
               &_BlockIdentifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BlockIdentifier& a, BlockIdentifier& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockIdentifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockIdentifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockIdentifier* New() const final {
    return CreateMaybeMessage<BlockIdentifier>(nullptr);
  }

  BlockIdentifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockIdentifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockIdentifier& from);
  void MergeFrom(const BlockIdentifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockIdentifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockIdentifier";
  }
  protected:
  explicit BlockIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kBlockhashFieldNumber = 2,
  };
  // int32 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bytes blockhash = 2;
  bool has_blockhash() const;
  private:
  bool _internal_has_blockhash() const;
  public:
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  void clear_id();
  IdCase id_case() const;
  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockIdentifier)
 private:
  class _Internal;
  void set_has_height();
  void set_has_blockhash();

  inline bool has_id() const;
  inline void clear_has_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union IdUnion {
    constexpr IdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 height_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  } id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class UpdatedBlockTip PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.UpdatedBlockTip) */ {
 public:
  inline UpdatedBlockTip() : UpdatedBlockTip(nullptr) {}
  virtual ~UpdatedBlockTip();
  explicit constexpr UpdatedBlockTip(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatedBlockTip(const UpdatedBlockTip& from);
  UpdatedBlockTip(UpdatedBlockTip&& from) noexcept
    : UpdatedBlockTip() {
    *this = ::std::move(from);
  }

  inline UpdatedBlockTip& operator=(const UpdatedBlockTip& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatedBlockTip& operator=(UpdatedBlockTip&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatedBlockTip& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatedBlockTip* internal_default_instance() {
    return reinterpret_cast<const UpdatedBlockTip*>(
               &_UpdatedBlockTip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdatedBlockTip& a, UpdatedBlockTip& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatedBlockTip* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatedBlockTip* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatedBlockTip* New() const final {
    return CreateMaybeMessage<UpdatedBlockTip>(nullptr);
  }

  UpdatedBlockTip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatedBlockTip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatedBlockTip& from);
  void MergeFrom(const UpdatedBlockTip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatedBlockTip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.UpdatedBlockTip";
  }
  protected:
  explicit UpdatedBlockTip(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockhashFieldNumber = 1,
  };
  // bytes blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.UpdatedBlockTip)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class TransactionAddedToMempool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.TransactionAddedToMempool) */ {
 public:
  inline TransactionAddedToMempool() : TransactionAddedToMempool(nullptr) {}
  virtual ~TransactionAddedToMempool();
  explicit constexpr TransactionAddedToMempool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionAddedToMempool(const TransactionAddedToMempool& from);
  TransactionAddedToMempool(TransactionAddedToMempool&& from) noexcept
    : TransactionAddedToMempool() {
    *this = ::std::move(from);
  }

  inline TransactionAddedToMempool& operator=(const TransactionAddedToMempool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionAddedToMempool& operator=(TransactionAddedToMempool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionAddedToMempool& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionAddedToMempool* internal_default_instance() {
    return reinterpret_cast<const TransactionAddedToMempool*>(
               &_TransactionAddedToMempool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TransactionAddedToMempool& a, TransactionAddedToMempool& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionAddedToMempool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionAddedToMempool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionAddedToMempool* New() const final {
    return CreateMaybeMessage<TransactionAddedToMempool>(nullptr);
  }

  TransactionAddedToMempool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionAddedToMempool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionAddedToMempool& from);
  void MergeFrom(const TransactionAddedToMempool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionAddedToMempool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.TransactionAddedToMempool";
  }
  protected:
  explicit TransactionAddedToMempool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // bytes tx = 1;
  void clear_tx();
  const std::string& tx() const;
  void set_tx(const std::string& value);
  void set_tx(std::string&& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  std::string* mutable_tx();
  std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.TransactionAddedToMempool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class TransactionRemovedFromMempool PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.TransactionRemovedFromMempool) */ {
 public:
  inline TransactionRemovedFromMempool() : TransactionRemovedFromMempool(nullptr) {}
  virtual ~TransactionRemovedFromMempool();
  explicit constexpr TransactionRemovedFromMempool(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransactionRemovedFromMempool(const TransactionRemovedFromMempool& from);
  TransactionRemovedFromMempool(TransactionRemovedFromMempool&& from) noexcept
    : TransactionRemovedFromMempool() {
    *this = ::std::move(from);
  }

  inline TransactionRemovedFromMempool& operator=(const TransactionRemovedFromMempool& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionRemovedFromMempool& operator=(TransactionRemovedFromMempool&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionRemovedFromMempool& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransactionRemovedFromMempool* internal_default_instance() {
    return reinterpret_cast<const TransactionRemovedFromMempool*>(
               &_TransactionRemovedFromMempool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransactionRemovedFromMempool& a, TransactionRemovedFromMempool& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionRemovedFromMempool* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionRemovedFromMempool* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionRemovedFromMempool* New() const final {
    return CreateMaybeMessage<TransactionRemovedFromMempool>(nullptr);
  }

  TransactionRemovedFromMempool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionRemovedFromMempool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionRemovedFromMempool& from);
  void MergeFrom(const TransactionRemovedFromMempool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionRemovedFromMempool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.TransactionRemovedFromMempool";
  }
  protected:
  explicit TransactionRemovedFromMempool(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
  };
  // bytes txid = 1;
  void clear_txid();
  const std::string& txid() const;
  void set_txid(const std::string& value);
  void set_txid(std::string&& value);
  void set_txid(const char* value);
  void set_txid(const void* value, size_t size);
  std::string* mutable_txid();
  std::string* release_txid();
  void set_allocated_txid(std::string* txid);
  private:
  const std::string& _internal_txid() const;
  void _internal_set_txid(const std::string& value);
  std::string* _internal_mutable_txid();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.TransactionRemovedFromMempool)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr txid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockConnected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockConnected) */ {
 public:
  inline BlockConnected() : BlockConnected(nullptr) {}
  virtual ~BlockConnected();
  explicit constexpr BlockConnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockConnected(const BlockConnected& from);
  BlockConnected(BlockConnected&& from) noexcept
    : BlockConnected() {
    *this = ::std::move(from);
  }

  inline BlockConnected& operator=(const BlockConnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockConnected& operator=(BlockConnected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockConnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockConnected* internal_default_instance() {
    return reinterpret_cast<const BlockConnected*>(
               &_BlockConnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BlockConnected& a, BlockConnected& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockConnected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockConnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockConnected* New() const final {
    return CreateMaybeMessage<BlockConnected>(nullptr);
  }

  BlockConnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockConnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockConnected& from);
  void MergeFrom(const BlockConnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockConnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockConnected";
  }
  protected:
  explicit BlockConnected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kTxidsFieldNumber = 3,
    kBlockheaderFieldNumber = 1,
  };
  // repeated .plugin_grpc.BlockMetadata metadata = 2;
  int metadata_size() const;
  private:
  int _internal_metadata_size() const;
  public:
  void clear_metadata();
  ::plugin_grpc::BlockMetadata* mutable_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >*
      mutable_metadata();
  private:
  const ::plugin_grpc::BlockMetadata& _internal_metadata(int index) const;
  ::plugin_grpc::BlockMetadata* _internal_add_metadata();
  public:
  const ::plugin_grpc::BlockMetadata& metadata(int index) const;
  ::plugin_grpc::BlockMetadata* add_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >&
      metadata() const;

  // repeated bytes txids = 3;
  int txids_size() const;
  private:
  int _internal_txids_size() const;
  public:
  void clear_txids();
  const std::string& txids(int index) const;
  std::string* mutable_txids(int index);
  void set_txids(int index, const std::string& value);
  void set_txids(int index, std::string&& value);
  void set_txids(int index, const char* value);
  void set_txids(int index, const void* value, size_t size);
  std::string* add_txids();
  void add_txids(const std::string& value);
  void add_txids(std::string&& value);
  void add_txids(const char* value);
  void add_txids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& txids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_txids();
  private:
  const std::string& _internal_txids(int index) const;
  std::string* _internal_add_txids();
  public:

  // bytes blockheader = 1;
  void clear_blockheader();
  const std::string& blockheader() const;
  void set_blockheader(const std::string& value);
  void set_blockheader(std::string&& value);
  void set_blockheader(const char* value);
  void set_blockheader(const void* value, size_t size);
  std::string* mutable_blockheader();
  std::string* release_blockheader();
  void set_allocated_blockheader(std::string* blockheader);
  private:
  const std::string& _internal_blockheader() const;
  void _internal_set_blockheader(const std::string& value);
  std::string* _internal_mutable_blockheader();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockConnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata > metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> txids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockDisconnected PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockDisconnected) */ {
 public:
  inline BlockDisconnected() : BlockDisconnected(nullptr) {}
  virtual ~BlockDisconnected();
  explicit constexpr BlockDisconnected(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockDisconnected(const BlockDisconnected& from);
  BlockDisconnected(BlockDisconnected&& from) noexcept
    : BlockDisconnected() {
    *this = ::std::move(from);
  }

  inline BlockDisconnected& operator=(const BlockDisconnected& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockDisconnected& operator=(BlockDisconnected&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockDisconnected& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockDisconnected* internal_default_instance() {
    return reinterpret_cast<const BlockDisconnected*>(
               &_BlockDisconnected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BlockDisconnected& a, BlockDisconnected& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockDisconnected* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockDisconnected* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockDisconnected* New() const final {
    return CreateMaybeMessage<BlockDisconnected>(nullptr);
  }

  BlockDisconnected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockDisconnected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockDisconnected& from);
  void MergeFrom(const BlockDisconnected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockDisconnected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockDisconnected";
  }
  protected:
  explicit BlockDisconnected(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockhashFieldNumber = 1,
  };
  // bytes blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockDisconnected)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class ChainStateFlushed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.ChainStateFlushed) */ {
 public:
  inline ChainStateFlushed() : ChainStateFlushed(nullptr) {}
  virtual ~ChainStateFlushed();
  explicit constexpr ChainStateFlushed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChainStateFlushed(const ChainStateFlushed& from);
  ChainStateFlushed(ChainStateFlushed&& from) noexcept
    : ChainStateFlushed() {
    *this = ::std::move(from);
  }

  inline ChainStateFlushed& operator=(const ChainStateFlushed& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChainStateFlushed& operator=(ChainStateFlushed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChainStateFlushed& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChainStateFlushed* internal_default_instance() {
    return reinterpret_cast<const ChainStateFlushed*>(
               &_ChainStateFlushed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChainStateFlushed& a, ChainStateFlushed& b) {
    a.Swap(&b);
  }
  inline void Swap(ChainStateFlushed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChainStateFlushed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChainStateFlushed* New() const final {
    return CreateMaybeMessage<ChainStateFlushed>(nullptr);
  }

  ChainStateFlushed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChainStateFlushed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChainStateFlushed& from);
  void MergeFrom(const ChainStateFlushed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChainStateFlushed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.ChainStateFlushed";
  }
  protected:
  explicit ChainStateFlushed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockhashFieldNumber = 1,
  };
  // bytes blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.ChainStateFlushed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockChecked PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockChecked) */ {
 public:
  inline BlockChecked() : BlockChecked(nullptr) {}
  virtual ~BlockChecked();
  explicit constexpr BlockChecked(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockChecked(const BlockChecked& from);
  BlockChecked(BlockChecked&& from) noexcept
    : BlockChecked() {
    *this = ::std::move(from);
  }

  inline BlockChecked& operator=(const BlockChecked& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockChecked& operator=(BlockChecked&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockChecked& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockChecked* internal_default_instance() {
    return reinterpret_cast<const BlockChecked*>(
               &_BlockChecked_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(BlockChecked& a, BlockChecked& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockChecked* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockChecked* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockChecked* New() const final {
    return CreateMaybeMessage<BlockChecked>(nullptr);
  }

  BlockChecked* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockChecked>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockChecked& from);
  void MergeFrom(const BlockChecked& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockChecked* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockChecked";
  }
  protected:
  explicit BlockChecked(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockhashFieldNumber = 1,
    kValidationStateFieldNumber = 2,
  };
  // bytes blockhash = 1;
  void clear_blockhash();
  const std::string& blockhash() const;
  void set_blockhash(const std::string& value);
  void set_blockhash(std::string&& value);
  void set_blockhash(const char* value);
  void set_blockhash(const void* value, size_t size);
  std::string* mutable_blockhash();
  std::string* release_blockhash();
  void set_allocated_blockhash(std::string* blockhash);
  private:
  const std::string& _internal_blockhash() const;
  void _internal_set_blockhash(const std::string& value);
  std::string* _internal_mutable_blockhash();
  public:

  // .plugin_grpc.BlockValidationState validation_state = 2;
  bool has_validation_state() const;
  private:
  bool _internal_has_validation_state() const;
  public:
  void clear_validation_state();
  const ::plugin_grpc::BlockValidationState& validation_state() const;
  ::plugin_grpc::BlockValidationState* release_validation_state();
  ::plugin_grpc::BlockValidationState* mutable_validation_state();
  void set_allocated_validation_state(::plugin_grpc::BlockValidationState* validation_state);
  private:
  const ::plugin_grpc::BlockValidationState& _internal_validation_state() const;
  ::plugin_grpc::BlockValidationState* _internal_mutable_validation_state();
  public:
  void unsafe_arena_set_allocated_validation_state(
      ::plugin_grpc::BlockValidationState* validation_state);
  ::plugin_grpc::BlockValidationState* unsafe_arena_release_validation_state();

  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockChecked)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockhash_;
  ::plugin_grpc::BlockValidationState* validation_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class BlockValidationState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.BlockValidationState) */ {
 public:
  inline BlockValidationState() : BlockValidationState(nullptr) {}
  virtual ~BlockValidationState();
  explicit constexpr BlockValidationState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BlockValidationState(const BlockValidationState& from);
  BlockValidationState(BlockValidationState&& from) noexcept
    : BlockValidationState() {
    *this = ::std::move(from);
  }

  inline BlockValidationState& operator=(const BlockValidationState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockValidationState& operator=(BlockValidationState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockValidationState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BlockValidationState* internal_default_instance() {
    return reinterpret_cast<const BlockValidationState*>(
               &_BlockValidationState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BlockValidationState& a, BlockValidationState& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockValidationState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockValidationState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockValidationState* New() const final {
    return CreateMaybeMessage<BlockValidationState>(nullptr);
  }

  BlockValidationState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockValidationState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockValidationState& from);
  void MergeFrom(const BlockValidationState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockValidationState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.BlockValidationState";
  }
  protected:
  explicit BlockValidationState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // string state = 1;
  void clear_state();
  const std::string& state() const;
  void set_state(const std::string& value);
  void set_state(std::string&& value);
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  std::string* mutable_state();
  std::string* release_state();
  void set_allocated_state(std::string* state);
  private:
  const std::string& _internal_state() const;
  void _internal_set_state(const std::string& value);
  std::string* _internal_mutable_state();
  public:

  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  void set_reason(const std::string& value);
  void set_reason(std::string&& value);
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  std::string* mutable_reason();
  std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.BlockValidationState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class NewPoWValidBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.NewPoWValidBlock) */ {
 public:
  inline NewPoWValidBlock() : NewPoWValidBlock(nullptr) {}
  virtual ~NewPoWValidBlock();
  explicit constexpr NewPoWValidBlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NewPoWValidBlock(const NewPoWValidBlock& from);
  NewPoWValidBlock(NewPoWValidBlock&& from) noexcept
    : NewPoWValidBlock() {
    *this = ::std::move(from);
  }

  inline NewPoWValidBlock& operator=(const NewPoWValidBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewPoWValidBlock& operator=(NewPoWValidBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NewPoWValidBlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewPoWValidBlock* internal_default_instance() {
    return reinterpret_cast<const NewPoWValidBlock*>(
               &_NewPoWValidBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(NewPoWValidBlock& a, NewPoWValidBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(NewPoWValidBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewPoWValidBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NewPoWValidBlock* New() const final {
    return CreateMaybeMessage<NewPoWValidBlock>(nullptr);
  }

  NewPoWValidBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NewPoWValidBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NewPoWValidBlock& from);
  void MergeFrom(const NewPoWValidBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewPoWValidBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.NewPoWValidBlock";
  }
  protected:
  explicit NewPoWValidBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockheaderFieldNumber = 1,
  };
  // bytes blockheader = 1;
  void clear_blockheader();
  const std::string& blockheader() const;
  void set_blockheader(const std::string& value);
  void set_blockheader(std::string&& value);
  void set_blockheader(const char* value);
  void set_blockheader(const void* value, size_t size);
  std::string* mutable_blockheader();
  std::string* release_blockheader();
  void set_allocated_blockheader(std::string* blockheader);
  private:
  const std::string& _internal_blockheader() const;
  void _internal_set_blockheader(const std::string& value);
  std::string* _internal_mutable_blockheader();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.NewPoWValidBlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr blockheader_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetBlockRequest) */ {
 public:
  inline GetBlockRequest() : GetBlockRequest(nullptr) {}
  virtual ~GetBlockRequest();
  explicit constexpr GetBlockRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockRequest(const GetBlockRequest& from);
  GetBlockRequest(GetBlockRequest&& from) noexcept
    : GetBlockRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockRequest& operator=(const GetBlockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockRequest& operator=(GetBlockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockRequest*>(
               &_GetBlockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetBlockRequest& a, GetBlockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockRequest* New() const final {
    return CreateMaybeMessage<GetBlockRequest>(nullptr);
  }

  GetBlockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockRequest& from);
  void MergeFrom(const GetBlockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetBlockRequest";
  }
  protected:
  explicit GetBlockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
  };
  // .plugin_grpc.BlockIdentifier block_id = 1;
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  const ::plugin_grpc::BlockIdentifier& block_id() const;
  ::plugin_grpc::BlockIdentifier* release_block_id();
  ::plugin_grpc::BlockIdentifier* mutable_block_id();
  void set_allocated_block_id(::plugin_grpc::BlockIdentifier* block_id);
  private:
  const ::plugin_grpc::BlockIdentifier& _internal_block_id() const;
  ::plugin_grpc::BlockIdentifier* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::plugin_grpc::BlockIdentifier* block_id);
  ::plugin_grpc::BlockIdentifier* unsafe_arena_release_block_id();

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetBlockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::plugin_grpc::BlockIdentifier* block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetBlockResponse) */ {
 public:
  inline GetBlockResponse() : GetBlockResponse(nullptr) {}
  virtual ~GetBlockResponse();
  explicit constexpr GetBlockResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockResponse(const GetBlockResponse& from);
  GetBlockResponse(GetBlockResponse&& from) noexcept
    : GetBlockResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockResponse& operator=(const GetBlockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockResponse& operator=(GetBlockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockResponse*>(
               &_GetBlockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetBlockResponse& a, GetBlockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockResponse* New() const final {
    return CreateMaybeMessage<GetBlockResponse>(nullptr);
  }

  GetBlockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockResponse& from);
  void MergeFrom(const GetBlockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetBlockResponse";
  }
  protected:
  explicit GetBlockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockFieldNumber = 1,
  };
  // .plugin_grpc.Block block = 1;
  bool has_block() const;
  private:
  bool _internal_has_block() const;
  public:
  void clear_block();
  const ::plugin_grpc::Block& block() const;
  ::plugin_grpc::Block* release_block();
  ::plugin_grpc::Block* mutable_block();
  void set_allocated_block(::plugin_grpc::Block* block);
  private:
  const ::plugin_grpc::Block& _internal_block() const;
  ::plugin_grpc::Block* _internal_mutable_block();
  public:
  void unsafe_arena_set_allocated_block(
      ::plugin_grpc::Block* block);
  ::plugin_grpc::Block* unsafe_arena_release_block();

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetBlockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::plugin_grpc::Block* block_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockUndoDataRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetBlockUndoDataRequest) */ {
 public:
  inline GetBlockUndoDataRequest() : GetBlockUndoDataRequest(nullptr) {}
  virtual ~GetBlockUndoDataRequest();
  explicit constexpr GetBlockUndoDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockUndoDataRequest(const GetBlockUndoDataRequest& from);
  GetBlockUndoDataRequest(GetBlockUndoDataRequest&& from) noexcept
    : GetBlockUndoDataRequest() {
    *this = ::std::move(from);
  }

  inline GetBlockUndoDataRequest& operator=(const GetBlockUndoDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockUndoDataRequest& operator=(GetBlockUndoDataRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockUndoDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockUndoDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetBlockUndoDataRequest*>(
               &_GetBlockUndoDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetBlockUndoDataRequest& a, GetBlockUndoDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockUndoDataRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockUndoDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockUndoDataRequest* New() const final {
    return CreateMaybeMessage<GetBlockUndoDataRequest>(nullptr);
  }

  GetBlockUndoDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockUndoDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockUndoDataRequest& from);
  void MergeFrom(const GetBlockUndoDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockUndoDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetBlockUndoDataRequest";
  }
  protected:
  explicit GetBlockUndoDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockIdFieldNumber = 1,
  };
  // .plugin_grpc.BlockIdentifier block_id = 1;
  bool has_block_id() const;
  private:
  bool _internal_has_block_id() const;
  public:
  void clear_block_id();
  const ::plugin_grpc::BlockIdentifier& block_id() const;
  ::plugin_grpc::BlockIdentifier* release_block_id();
  ::plugin_grpc::BlockIdentifier* mutable_block_id();
  void set_allocated_block_id(::plugin_grpc::BlockIdentifier* block_id);
  private:
  const ::plugin_grpc::BlockIdentifier& _internal_block_id() const;
  ::plugin_grpc::BlockIdentifier* _internal_mutable_block_id();
  public:
  void unsafe_arena_set_allocated_block_id(
      ::plugin_grpc::BlockIdentifier* block_id);
  ::plugin_grpc::BlockIdentifier* unsafe_arena_release_block_id();

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetBlockUndoDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::plugin_grpc::BlockIdentifier* block_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetBlockUndoDataResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetBlockUndoDataResponse) */ {
 public:
  inline GetBlockUndoDataResponse() : GetBlockUndoDataResponse(nullptr) {}
  virtual ~GetBlockUndoDataResponse();
  explicit constexpr GetBlockUndoDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBlockUndoDataResponse(const GetBlockUndoDataResponse& from);
  GetBlockUndoDataResponse(GetBlockUndoDataResponse&& from) noexcept
    : GetBlockUndoDataResponse() {
    *this = ::std::move(from);
  }

  inline GetBlockUndoDataResponse& operator=(const GetBlockUndoDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBlockUndoDataResponse& operator=(GetBlockUndoDataResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetBlockUndoDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBlockUndoDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetBlockUndoDataResponse*>(
               &_GetBlockUndoDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetBlockUndoDataResponse& a, GetBlockUndoDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBlockUndoDataResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBlockUndoDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBlockUndoDataResponse* New() const final {
    return CreateMaybeMessage<GetBlockUndoDataResponse>(nullptr);
  }

  GetBlockUndoDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBlockUndoDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBlockUndoDataResponse& from);
  void MergeFrom(const GetBlockUndoDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBlockUndoDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetBlockUndoDataResponse";
  }
  protected:
  explicit GetBlockUndoDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoinsFieldNumber = 1,
  };
  // repeated .plugin_grpc.Coin coins = 1;
  int coins_size() const;
  private:
  int _internal_coins_size() const;
  public:
  void clear_coins();
  ::plugin_grpc::Coin* mutable_coins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::Coin >*
      mutable_coins();
  private:
  const ::plugin_grpc::Coin& _internal_coins(int index) const;
  ::plugin_grpc::Coin* _internal_add_coins();
  public:
  const ::plugin_grpc::Coin& coins(int index) const;
  ::plugin_grpc::Coin* add_coins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::Coin >&
      coins() const;

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetBlockUndoDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::Coin > coins_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetMempoolRequest) */ {
 public:
  inline GetMempoolRequest() : GetMempoolRequest(nullptr) {}
  virtual ~GetMempoolRequest();
  explicit constexpr GetMempoolRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolRequest(const GetMempoolRequest& from);
  GetMempoolRequest(GetMempoolRequest&& from) noexcept
    : GetMempoolRequest() {
    *this = ::std::move(from);
  }

  inline GetMempoolRequest& operator=(const GetMempoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolRequest& operator=(GetMempoolRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetMempoolRequest*>(
               &_GetMempoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetMempoolRequest& a, GetMempoolRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolRequest* New() const final {
    return CreateMaybeMessage<GetMempoolRequest>(nullptr);
  }

  GetMempoolRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolRequest& from);
  void MergeFrom(const GetMempoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetMempoolRequest";
  }
  protected:
  explicit GetMempoolRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetMempoolRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class GetMempoolResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.GetMempoolResponse) */ {
 public:
  inline GetMempoolResponse() : GetMempoolResponse(nullptr) {}
  virtual ~GetMempoolResponse();
  explicit constexpr GetMempoolResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMempoolResponse(const GetMempoolResponse& from);
  GetMempoolResponse(GetMempoolResponse&& from) noexcept
    : GetMempoolResponse() {
    *this = ::std::move(from);
  }

  inline GetMempoolResponse& operator=(const GetMempoolResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMempoolResponse& operator=(GetMempoolResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMempoolResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMempoolResponse* internal_default_instance() {
    return reinterpret_cast<const GetMempoolResponse*>(
               &_GetMempoolResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetMempoolResponse& a, GetMempoolResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMempoolResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMempoolResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMempoolResponse* New() const final {
    return CreateMaybeMessage<GetMempoolResponse>(nullptr);
  }

  GetMempoolResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMempoolResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMempoolResponse& from);
  void MergeFrom(const GetMempoolResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMempoolResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.GetMempoolResponse";
  }
  protected:
  explicit GetMempoolResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxsFieldNumber = 1,
  };
  // repeated .plugin_grpc.MempoolTx txs = 1;
  int txs_size() const;
  private:
  int _internal_txs_size() const;
  public:
  void clear_txs();
  ::plugin_grpc::MempoolTx* mutable_txs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::MempoolTx >*
      mutable_txs();
  private:
  const ::plugin_grpc::MempoolTx& _internal_txs(int index) const;
  ::plugin_grpc::MempoolTx* _internal_add_txs();
  public:
  const ::plugin_grpc::MempoolTx& txs(int index) const;
  ::plugin_grpc::MempoolTx* add_txs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::MempoolTx >&
      txs() const;

  // @@protoc_insertion_point(class_scope:plugin_grpc.GetMempoolResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::MempoolTx > txs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// -------------------------------------------------------------------

class MempoolTx PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:plugin_grpc.MempoolTx) */ {
 public:
  inline MempoolTx() : MempoolTx(nullptr) {}
  virtual ~MempoolTx();
  explicit constexpr MempoolTx(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MempoolTx(const MempoolTx& from);
  MempoolTx(MempoolTx&& from) noexcept
    : MempoolTx() {
    *this = ::std::move(from);
  }

  inline MempoolTx& operator=(const MempoolTx& from) {
    CopyFrom(from);
    return *this;
  }
  inline MempoolTx& operator=(MempoolTx&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MempoolTx& default_instance() {
    return *internal_default_instance();
  }
  static inline const MempoolTx* internal_default_instance() {
    return reinterpret_cast<const MempoolTx*>(
               &_MempoolTx_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MempoolTx& a, MempoolTx& b) {
    a.Swap(&b);
  }
  inline void Swap(MempoolTx* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MempoolTx* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MempoolTx* New() const final {
    return CreateMaybeMessage<MempoolTx>(nullptr);
  }

  MempoolTx* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MempoolTx>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MempoolTx& from);
  void MergeFrom(const MempoolTx& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MempoolTx* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "plugin_grpc.MempoolTx";
  }
  protected:
  explicit MempoolTx(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_plugin_5fgrpc_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxFieldNumber = 1,
  };
  // bytes tx = 1;
  void clear_tx();
  const std::string& tx() const;
  void set_tx(const std::string& value);
  void set_tx(std::string&& value);
  void set_tx(const char* value);
  void set_tx(const void* value, size_t size);
  std::string* mutable_tx();
  std::string* release_tx();
  void set_allocated_tx(std::string* tx);
  private:
  const std::string& _internal_tx() const;
  void _internal_set_tx(const std::string& value);
  std::string* _internal_mutable_tx();
  public:

  // @@protoc_insertion_point(class_scope:plugin_grpc.MempoolTx)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_plugin_5fgrpc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageSubscribeTo

// bool updated_block_tip = 1;
inline void MessageSubscribeTo::clear_updated_block_tip() {
  updated_block_tip_ = false;
}
inline bool MessageSubscribeTo::_internal_updated_block_tip() const {
  return updated_block_tip_;
}
inline bool MessageSubscribeTo::updated_block_tip() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.updated_block_tip)
  return _internal_updated_block_tip();
}
inline void MessageSubscribeTo::_internal_set_updated_block_tip(bool value) {
  
  updated_block_tip_ = value;
}
inline void MessageSubscribeTo::set_updated_block_tip(bool value) {
  _internal_set_updated_block_tip(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.updated_block_tip)
}

// bool transaction_added_to_mempool = 2;
inline void MessageSubscribeTo::clear_transaction_added_to_mempool() {
  transaction_added_to_mempool_ = false;
}
inline bool MessageSubscribeTo::_internal_transaction_added_to_mempool() const {
  return transaction_added_to_mempool_;
}
inline bool MessageSubscribeTo::transaction_added_to_mempool() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.transaction_added_to_mempool)
  return _internal_transaction_added_to_mempool();
}
inline void MessageSubscribeTo::_internal_set_transaction_added_to_mempool(bool value) {
  
  transaction_added_to_mempool_ = value;
}
inline void MessageSubscribeTo::set_transaction_added_to_mempool(bool value) {
  _internal_set_transaction_added_to_mempool(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.transaction_added_to_mempool)
}

// bool transaction_removed_from_mempool = 3;
inline void MessageSubscribeTo::clear_transaction_removed_from_mempool() {
  transaction_removed_from_mempool_ = false;
}
inline bool MessageSubscribeTo::_internal_transaction_removed_from_mempool() const {
  return transaction_removed_from_mempool_;
}
inline bool MessageSubscribeTo::transaction_removed_from_mempool() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.transaction_removed_from_mempool)
  return _internal_transaction_removed_from_mempool();
}
inline void MessageSubscribeTo::_internal_set_transaction_removed_from_mempool(bool value) {
  
  transaction_removed_from_mempool_ = value;
}
inline void MessageSubscribeTo::set_transaction_removed_from_mempool(bool value) {
  _internal_set_transaction_removed_from_mempool(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.transaction_removed_from_mempool)
}

// bool block_connected = 4;
inline void MessageSubscribeTo::clear_block_connected() {
  block_connected_ = false;
}
inline bool MessageSubscribeTo::_internal_block_connected() const {
  return block_connected_;
}
inline bool MessageSubscribeTo::block_connected() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.block_connected)
  return _internal_block_connected();
}
inline void MessageSubscribeTo::_internal_set_block_connected(bool value) {
  
  block_connected_ = value;
}
inline void MessageSubscribeTo::set_block_connected(bool value) {
  _internal_set_block_connected(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.block_connected)
}

// bool block_disconnected = 5;
inline void MessageSubscribeTo::clear_block_disconnected() {
  block_disconnected_ = false;
}
inline bool MessageSubscribeTo::_internal_block_disconnected() const {
  return block_disconnected_;
}
inline bool MessageSubscribeTo::block_disconnected() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.block_disconnected)
  return _internal_block_disconnected();
}
inline void MessageSubscribeTo::_internal_set_block_disconnected(bool value) {
  
  block_disconnected_ = value;
}
inline void MessageSubscribeTo::set_block_disconnected(bool value) {
  _internal_set_block_disconnected(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.block_disconnected)
}

// bool chain_state_flushed = 6;
inline void MessageSubscribeTo::clear_chain_state_flushed() {
  chain_state_flushed_ = false;
}
inline bool MessageSubscribeTo::_internal_chain_state_flushed() const {
  return chain_state_flushed_;
}
inline bool MessageSubscribeTo::chain_state_flushed() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.chain_state_flushed)
  return _internal_chain_state_flushed();
}
inline void MessageSubscribeTo::_internal_set_chain_state_flushed(bool value) {
  
  chain_state_flushed_ = value;
}
inline void MessageSubscribeTo::set_chain_state_flushed(bool value) {
  _internal_set_chain_state_flushed(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.chain_state_flushed)
}

// bool block_checked = 7;
inline void MessageSubscribeTo::clear_block_checked() {
  block_checked_ = false;
}
inline bool MessageSubscribeTo::_internal_block_checked() const {
  return block_checked_;
}
inline bool MessageSubscribeTo::block_checked() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.block_checked)
  return _internal_block_checked();
}
inline void MessageSubscribeTo::_internal_set_block_checked(bool value) {
  
  block_checked_ = value;
}
inline void MessageSubscribeTo::set_block_checked(bool value) {
  _internal_set_block_checked(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.block_checked)
}

// bool new_pow_valid_block = 8;
inline void MessageSubscribeTo::clear_new_pow_valid_block() {
  new_pow_valid_block_ = false;
}
inline bool MessageSubscribeTo::_internal_new_pow_valid_block() const {
  return new_pow_valid_block_;
}
inline bool MessageSubscribeTo::new_pow_valid_block() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MessageSubscribeTo.new_pow_valid_block)
  return _internal_new_pow_valid_block();
}
inline void MessageSubscribeTo::_internal_set_new_pow_valid_block(bool value) {
  
  new_pow_valid_block_ = value;
}
inline void MessageSubscribeTo::set_new_pow_valid_block(bool value) {
  _internal_set_new_pow_valid_block(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MessageSubscribeTo.new_pow_valid_block)
}

// -------------------------------------------------------------------

// Message

// .plugin_grpc.UpdatedBlockTip updated_block_tip = 1;
inline bool Message::_internal_has_updated_block_tip() const {
  return message_case() == kUpdatedBlockTip;
}
inline bool Message::has_updated_block_tip() const {
  return _internal_has_updated_block_tip();
}
inline void Message::set_has_updated_block_tip() {
  _oneof_case_[0] = kUpdatedBlockTip;
}
inline void Message::clear_updated_block_tip() {
  if (_internal_has_updated_block_tip()) {
    if (GetArena() == nullptr) {
      delete message_.updated_block_tip_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::UpdatedBlockTip* Message::release_updated_block_tip() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.updated_block_tip)
  if (_internal_has_updated_block_tip()) {
    clear_has_message();
      ::plugin_grpc::UpdatedBlockTip* temp = message_.updated_block_tip_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.updated_block_tip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::UpdatedBlockTip& Message::_internal_updated_block_tip() const {
  return _internal_has_updated_block_tip()
      ? *message_.updated_block_tip_
      : reinterpret_cast< ::plugin_grpc::UpdatedBlockTip&>(::plugin_grpc::_UpdatedBlockTip_default_instance_);
}
inline const ::plugin_grpc::UpdatedBlockTip& Message::updated_block_tip() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.updated_block_tip)
  return _internal_updated_block_tip();
}
inline ::plugin_grpc::UpdatedBlockTip* Message::unsafe_arena_release_updated_block_tip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.updated_block_tip)
  if (_internal_has_updated_block_tip()) {
    clear_has_message();
    ::plugin_grpc::UpdatedBlockTip* temp = message_.updated_block_tip_;
    message_.updated_block_tip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_updated_block_tip(::plugin_grpc::UpdatedBlockTip* updated_block_tip) {
  clear_message();
  if (updated_block_tip) {
    set_has_updated_block_tip();
    message_.updated_block_tip_ = updated_block_tip;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.updated_block_tip)
}
inline ::plugin_grpc::UpdatedBlockTip* Message::_internal_mutable_updated_block_tip() {
  if (!_internal_has_updated_block_tip()) {
    clear_message();
    set_has_updated_block_tip();
    message_.updated_block_tip_ = CreateMaybeMessage< ::plugin_grpc::UpdatedBlockTip >(GetArena());
  }
  return message_.updated_block_tip_;
}
inline ::plugin_grpc::UpdatedBlockTip* Message::mutable_updated_block_tip() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.updated_block_tip)
  return _internal_mutable_updated_block_tip();
}

// .plugin_grpc.TransactionAddedToMempool transaction_added_to_mempool = 2;
inline bool Message::_internal_has_transaction_added_to_mempool() const {
  return message_case() == kTransactionAddedToMempool;
}
inline bool Message::has_transaction_added_to_mempool() const {
  return _internal_has_transaction_added_to_mempool();
}
inline void Message::set_has_transaction_added_to_mempool() {
  _oneof_case_[0] = kTransactionAddedToMempool;
}
inline void Message::clear_transaction_added_to_mempool() {
  if (_internal_has_transaction_added_to_mempool()) {
    if (GetArena() == nullptr) {
      delete message_.transaction_added_to_mempool_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::TransactionAddedToMempool* Message::release_transaction_added_to_mempool() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.transaction_added_to_mempool)
  if (_internal_has_transaction_added_to_mempool()) {
    clear_has_message();
      ::plugin_grpc::TransactionAddedToMempool* temp = message_.transaction_added_to_mempool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.transaction_added_to_mempool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::TransactionAddedToMempool& Message::_internal_transaction_added_to_mempool() const {
  return _internal_has_transaction_added_to_mempool()
      ? *message_.transaction_added_to_mempool_
      : reinterpret_cast< ::plugin_grpc::TransactionAddedToMempool&>(::plugin_grpc::_TransactionAddedToMempool_default_instance_);
}
inline const ::plugin_grpc::TransactionAddedToMempool& Message::transaction_added_to_mempool() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.transaction_added_to_mempool)
  return _internal_transaction_added_to_mempool();
}
inline ::plugin_grpc::TransactionAddedToMempool* Message::unsafe_arena_release_transaction_added_to_mempool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.transaction_added_to_mempool)
  if (_internal_has_transaction_added_to_mempool()) {
    clear_has_message();
    ::plugin_grpc::TransactionAddedToMempool* temp = message_.transaction_added_to_mempool_;
    message_.transaction_added_to_mempool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_transaction_added_to_mempool(::plugin_grpc::TransactionAddedToMempool* transaction_added_to_mempool) {
  clear_message();
  if (transaction_added_to_mempool) {
    set_has_transaction_added_to_mempool();
    message_.transaction_added_to_mempool_ = transaction_added_to_mempool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.transaction_added_to_mempool)
}
inline ::plugin_grpc::TransactionAddedToMempool* Message::_internal_mutable_transaction_added_to_mempool() {
  if (!_internal_has_transaction_added_to_mempool()) {
    clear_message();
    set_has_transaction_added_to_mempool();
    message_.transaction_added_to_mempool_ = CreateMaybeMessage< ::plugin_grpc::TransactionAddedToMempool >(GetArena());
  }
  return message_.transaction_added_to_mempool_;
}
inline ::plugin_grpc::TransactionAddedToMempool* Message::mutable_transaction_added_to_mempool() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.transaction_added_to_mempool)
  return _internal_mutable_transaction_added_to_mempool();
}

// .plugin_grpc.TransactionRemovedFromMempool transaction_removed_from_mempool = 3;
inline bool Message::_internal_has_transaction_removed_from_mempool() const {
  return message_case() == kTransactionRemovedFromMempool;
}
inline bool Message::has_transaction_removed_from_mempool() const {
  return _internal_has_transaction_removed_from_mempool();
}
inline void Message::set_has_transaction_removed_from_mempool() {
  _oneof_case_[0] = kTransactionRemovedFromMempool;
}
inline void Message::clear_transaction_removed_from_mempool() {
  if (_internal_has_transaction_removed_from_mempool()) {
    if (GetArena() == nullptr) {
      delete message_.transaction_removed_from_mempool_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::TransactionRemovedFromMempool* Message::release_transaction_removed_from_mempool() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.transaction_removed_from_mempool)
  if (_internal_has_transaction_removed_from_mempool()) {
    clear_has_message();
      ::plugin_grpc::TransactionRemovedFromMempool* temp = message_.transaction_removed_from_mempool_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.transaction_removed_from_mempool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::TransactionRemovedFromMempool& Message::_internal_transaction_removed_from_mempool() const {
  return _internal_has_transaction_removed_from_mempool()
      ? *message_.transaction_removed_from_mempool_
      : reinterpret_cast< ::plugin_grpc::TransactionRemovedFromMempool&>(::plugin_grpc::_TransactionRemovedFromMempool_default_instance_);
}
inline const ::plugin_grpc::TransactionRemovedFromMempool& Message::transaction_removed_from_mempool() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.transaction_removed_from_mempool)
  return _internal_transaction_removed_from_mempool();
}
inline ::plugin_grpc::TransactionRemovedFromMempool* Message::unsafe_arena_release_transaction_removed_from_mempool() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.transaction_removed_from_mempool)
  if (_internal_has_transaction_removed_from_mempool()) {
    clear_has_message();
    ::plugin_grpc::TransactionRemovedFromMempool* temp = message_.transaction_removed_from_mempool_;
    message_.transaction_removed_from_mempool_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_transaction_removed_from_mempool(::plugin_grpc::TransactionRemovedFromMempool* transaction_removed_from_mempool) {
  clear_message();
  if (transaction_removed_from_mempool) {
    set_has_transaction_removed_from_mempool();
    message_.transaction_removed_from_mempool_ = transaction_removed_from_mempool;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.transaction_removed_from_mempool)
}
inline ::plugin_grpc::TransactionRemovedFromMempool* Message::_internal_mutable_transaction_removed_from_mempool() {
  if (!_internal_has_transaction_removed_from_mempool()) {
    clear_message();
    set_has_transaction_removed_from_mempool();
    message_.transaction_removed_from_mempool_ = CreateMaybeMessage< ::plugin_grpc::TransactionRemovedFromMempool >(GetArena());
  }
  return message_.transaction_removed_from_mempool_;
}
inline ::plugin_grpc::TransactionRemovedFromMempool* Message::mutable_transaction_removed_from_mempool() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.transaction_removed_from_mempool)
  return _internal_mutable_transaction_removed_from_mempool();
}

// .plugin_grpc.BlockConnected block_connected = 4;
inline bool Message::_internal_has_block_connected() const {
  return message_case() == kBlockConnected;
}
inline bool Message::has_block_connected() const {
  return _internal_has_block_connected();
}
inline void Message::set_has_block_connected() {
  _oneof_case_[0] = kBlockConnected;
}
inline void Message::clear_block_connected() {
  if (_internal_has_block_connected()) {
    if (GetArena() == nullptr) {
      delete message_.block_connected_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::BlockConnected* Message::release_block_connected() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.block_connected)
  if (_internal_has_block_connected()) {
    clear_has_message();
      ::plugin_grpc::BlockConnected* temp = message_.block_connected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.block_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::BlockConnected& Message::_internal_block_connected() const {
  return _internal_has_block_connected()
      ? *message_.block_connected_
      : reinterpret_cast< ::plugin_grpc::BlockConnected&>(::plugin_grpc::_BlockConnected_default_instance_);
}
inline const ::plugin_grpc::BlockConnected& Message::block_connected() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.block_connected)
  return _internal_block_connected();
}
inline ::plugin_grpc::BlockConnected* Message::unsafe_arena_release_block_connected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.block_connected)
  if (_internal_has_block_connected()) {
    clear_has_message();
    ::plugin_grpc::BlockConnected* temp = message_.block_connected_;
    message_.block_connected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_connected(::plugin_grpc::BlockConnected* block_connected) {
  clear_message();
  if (block_connected) {
    set_has_block_connected();
    message_.block_connected_ = block_connected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.block_connected)
}
inline ::plugin_grpc::BlockConnected* Message::_internal_mutable_block_connected() {
  if (!_internal_has_block_connected()) {
    clear_message();
    set_has_block_connected();
    message_.block_connected_ = CreateMaybeMessage< ::plugin_grpc::BlockConnected >(GetArena());
  }
  return message_.block_connected_;
}
inline ::plugin_grpc::BlockConnected* Message::mutable_block_connected() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.block_connected)
  return _internal_mutable_block_connected();
}

// .plugin_grpc.BlockDisconnected block_disconnected = 5;
inline bool Message::_internal_has_block_disconnected() const {
  return message_case() == kBlockDisconnected;
}
inline bool Message::has_block_disconnected() const {
  return _internal_has_block_disconnected();
}
inline void Message::set_has_block_disconnected() {
  _oneof_case_[0] = kBlockDisconnected;
}
inline void Message::clear_block_disconnected() {
  if (_internal_has_block_disconnected()) {
    if (GetArena() == nullptr) {
      delete message_.block_disconnected_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::BlockDisconnected* Message::release_block_disconnected() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.block_disconnected)
  if (_internal_has_block_disconnected()) {
    clear_has_message();
      ::plugin_grpc::BlockDisconnected* temp = message_.block_disconnected_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.block_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::BlockDisconnected& Message::_internal_block_disconnected() const {
  return _internal_has_block_disconnected()
      ? *message_.block_disconnected_
      : reinterpret_cast< ::plugin_grpc::BlockDisconnected&>(::plugin_grpc::_BlockDisconnected_default_instance_);
}
inline const ::plugin_grpc::BlockDisconnected& Message::block_disconnected() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.block_disconnected)
  return _internal_block_disconnected();
}
inline ::plugin_grpc::BlockDisconnected* Message::unsafe_arena_release_block_disconnected() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.block_disconnected)
  if (_internal_has_block_disconnected()) {
    clear_has_message();
    ::plugin_grpc::BlockDisconnected* temp = message_.block_disconnected_;
    message_.block_disconnected_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_disconnected(::plugin_grpc::BlockDisconnected* block_disconnected) {
  clear_message();
  if (block_disconnected) {
    set_has_block_disconnected();
    message_.block_disconnected_ = block_disconnected;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.block_disconnected)
}
inline ::plugin_grpc::BlockDisconnected* Message::_internal_mutable_block_disconnected() {
  if (!_internal_has_block_disconnected()) {
    clear_message();
    set_has_block_disconnected();
    message_.block_disconnected_ = CreateMaybeMessage< ::plugin_grpc::BlockDisconnected >(GetArena());
  }
  return message_.block_disconnected_;
}
inline ::plugin_grpc::BlockDisconnected* Message::mutable_block_disconnected() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.block_disconnected)
  return _internal_mutable_block_disconnected();
}

// .plugin_grpc.ChainStateFlushed chain_state_flushed = 6;
inline bool Message::_internal_has_chain_state_flushed() const {
  return message_case() == kChainStateFlushed;
}
inline bool Message::has_chain_state_flushed() const {
  return _internal_has_chain_state_flushed();
}
inline void Message::set_has_chain_state_flushed() {
  _oneof_case_[0] = kChainStateFlushed;
}
inline void Message::clear_chain_state_flushed() {
  if (_internal_has_chain_state_flushed()) {
    if (GetArena() == nullptr) {
      delete message_.chain_state_flushed_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::ChainStateFlushed* Message::release_chain_state_flushed() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.chain_state_flushed)
  if (_internal_has_chain_state_flushed()) {
    clear_has_message();
      ::plugin_grpc::ChainStateFlushed* temp = message_.chain_state_flushed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.chain_state_flushed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::ChainStateFlushed& Message::_internal_chain_state_flushed() const {
  return _internal_has_chain_state_flushed()
      ? *message_.chain_state_flushed_
      : reinterpret_cast< ::plugin_grpc::ChainStateFlushed&>(::plugin_grpc::_ChainStateFlushed_default_instance_);
}
inline const ::plugin_grpc::ChainStateFlushed& Message::chain_state_flushed() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.chain_state_flushed)
  return _internal_chain_state_flushed();
}
inline ::plugin_grpc::ChainStateFlushed* Message::unsafe_arena_release_chain_state_flushed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.chain_state_flushed)
  if (_internal_has_chain_state_flushed()) {
    clear_has_message();
    ::plugin_grpc::ChainStateFlushed* temp = message_.chain_state_flushed_;
    message_.chain_state_flushed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_chain_state_flushed(::plugin_grpc::ChainStateFlushed* chain_state_flushed) {
  clear_message();
  if (chain_state_flushed) {
    set_has_chain_state_flushed();
    message_.chain_state_flushed_ = chain_state_flushed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.chain_state_flushed)
}
inline ::plugin_grpc::ChainStateFlushed* Message::_internal_mutable_chain_state_flushed() {
  if (!_internal_has_chain_state_flushed()) {
    clear_message();
    set_has_chain_state_flushed();
    message_.chain_state_flushed_ = CreateMaybeMessage< ::plugin_grpc::ChainStateFlushed >(GetArena());
  }
  return message_.chain_state_flushed_;
}
inline ::plugin_grpc::ChainStateFlushed* Message::mutable_chain_state_flushed() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.chain_state_flushed)
  return _internal_mutable_chain_state_flushed();
}

// .plugin_grpc.BlockChecked block_checked = 7;
inline bool Message::_internal_has_block_checked() const {
  return message_case() == kBlockChecked;
}
inline bool Message::has_block_checked() const {
  return _internal_has_block_checked();
}
inline void Message::set_has_block_checked() {
  _oneof_case_[0] = kBlockChecked;
}
inline void Message::clear_block_checked() {
  if (_internal_has_block_checked()) {
    if (GetArena() == nullptr) {
      delete message_.block_checked_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::BlockChecked* Message::release_block_checked() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.block_checked)
  if (_internal_has_block_checked()) {
    clear_has_message();
      ::plugin_grpc::BlockChecked* temp = message_.block_checked_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.block_checked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::BlockChecked& Message::_internal_block_checked() const {
  return _internal_has_block_checked()
      ? *message_.block_checked_
      : reinterpret_cast< ::plugin_grpc::BlockChecked&>(::plugin_grpc::_BlockChecked_default_instance_);
}
inline const ::plugin_grpc::BlockChecked& Message::block_checked() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.block_checked)
  return _internal_block_checked();
}
inline ::plugin_grpc::BlockChecked* Message::unsafe_arena_release_block_checked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.block_checked)
  if (_internal_has_block_checked()) {
    clear_has_message();
    ::plugin_grpc::BlockChecked* temp = message_.block_checked_;
    message_.block_checked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_block_checked(::plugin_grpc::BlockChecked* block_checked) {
  clear_message();
  if (block_checked) {
    set_has_block_checked();
    message_.block_checked_ = block_checked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.block_checked)
}
inline ::plugin_grpc::BlockChecked* Message::_internal_mutable_block_checked() {
  if (!_internal_has_block_checked()) {
    clear_message();
    set_has_block_checked();
    message_.block_checked_ = CreateMaybeMessage< ::plugin_grpc::BlockChecked >(GetArena());
  }
  return message_.block_checked_;
}
inline ::plugin_grpc::BlockChecked* Message::mutable_block_checked() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.block_checked)
  return _internal_mutable_block_checked();
}

// .plugin_grpc.NewPoWValidBlock new_pow_valid_block = 8;
inline bool Message::_internal_has_new_pow_valid_block() const {
  return message_case() == kNewPowValidBlock;
}
inline bool Message::has_new_pow_valid_block() const {
  return _internal_has_new_pow_valid_block();
}
inline void Message::set_has_new_pow_valid_block() {
  _oneof_case_[0] = kNewPowValidBlock;
}
inline void Message::clear_new_pow_valid_block() {
  if (_internal_has_new_pow_valid_block()) {
    if (GetArena() == nullptr) {
      delete message_.new_pow_valid_block_;
    }
    clear_has_message();
  }
}
inline ::plugin_grpc::NewPoWValidBlock* Message::release_new_pow_valid_block() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Message.new_pow_valid_block)
  if (_internal_has_new_pow_valid_block()) {
    clear_has_message();
      ::plugin_grpc::NewPoWValidBlock* temp = message_.new_pow_valid_block_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.new_pow_valid_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::plugin_grpc::NewPoWValidBlock& Message::_internal_new_pow_valid_block() const {
  return _internal_has_new_pow_valid_block()
      ? *message_.new_pow_valid_block_
      : reinterpret_cast< ::plugin_grpc::NewPoWValidBlock&>(::plugin_grpc::_NewPoWValidBlock_default_instance_);
}
inline const ::plugin_grpc::NewPoWValidBlock& Message::new_pow_valid_block() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Message.new_pow_valid_block)
  return _internal_new_pow_valid_block();
}
inline ::plugin_grpc::NewPoWValidBlock* Message::unsafe_arena_release_new_pow_valid_block() {
  // @@protoc_insertion_point(field_unsafe_arena_release:plugin_grpc.Message.new_pow_valid_block)
  if (_internal_has_new_pow_valid_block()) {
    clear_has_message();
    ::plugin_grpc::NewPoWValidBlock* temp = message_.new_pow_valid_block_;
    message_.new_pow_valid_block_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Message::unsafe_arena_set_allocated_new_pow_valid_block(::plugin_grpc::NewPoWValidBlock* new_pow_valid_block) {
  clear_message();
  if (new_pow_valid_block) {
    set_has_new_pow_valid_block();
    message_.new_pow_valid_block_ = new_pow_valid_block;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.Message.new_pow_valid_block)
}
inline ::plugin_grpc::NewPoWValidBlock* Message::_internal_mutable_new_pow_valid_block() {
  if (!_internal_has_new_pow_valid_block()) {
    clear_message();
    set_has_new_pow_valid_block();
    message_.new_pow_valid_block_ = CreateMaybeMessage< ::plugin_grpc::NewPoWValidBlock >(GetArena());
  }
  return message_.new_pow_valid_block_;
}
inline ::plugin_grpc::NewPoWValidBlock* Message::mutable_new_pow_valid_block() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Message.new_pow_valid_block)
  return _internal_mutable_new_pow_valid_block();
}

inline bool Message::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void Message::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline Message::MessageCase Message::message_case() const {
  return Message::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Block

// bytes header = 1;
inline void Block::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& Block::header() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Block.header)
  return _internal_header();
}
inline void Block::set_header(const std::string& value) {
  _internal_set_header(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.Block.header)
}
inline std::string* Block::mutable_header() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Block.header)
  return _internal_mutable_header();
}
inline const std::string& Block::_internal_header() const {
  return header_.Get();
}
inline void Block::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Block::set_header(std::string&& value) {
  
  header_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.Block.header)
}
inline void Block::set_header(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.Block.header)
}
inline void Block::set_header(const void* value,
    size_t size) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.Block.header)
}
inline std::string* Block::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Block::release_header() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Block.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Block::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.Block.header)
}

// repeated .plugin_grpc.BlockMetadata metadata = 2;
inline int Block::_internal_metadata_size() const {
  return metadata_.size();
}
inline int Block::metadata_size() const {
  return _internal_metadata_size();
}
inline void Block::clear_metadata() {
  metadata_.Clear();
}
inline ::plugin_grpc::BlockMetadata* Block::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Block.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >*
Block::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.Block.metadata)
  return &metadata_;
}
inline const ::plugin_grpc::BlockMetadata& Block::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::plugin_grpc::BlockMetadata& Block::metadata(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Block.metadata)
  return _internal_metadata(index);
}
inline ::plugin_grpc::BlockMetadata* Block::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::plugin_grpc::BlockMetadata* Block::add_metadata() {
  // @@protoc_insertion_point(field_add:plugin_grpc.Block.metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >&
Block::metadata() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.Block.metadata)
  return metadata_;
}

// repeated bytes txs = 3;
inline int Block::_internal_txs_size() const {
  return txs_.size();
}
inline int Block::txs_size() const {
  return _internal_txs_size();
}
inline void Block::clear_txs() {
  txs_.Clear();
}
inline std::string* Block::add_txs() {
  // @@protoc_insertion_point(field_add_mutable:plugin_grpc.Block.txs)
  return _internal_add_txs();
}
inline const std::string& Block::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const std::string& Block::txs(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Block.txs)
  return _internal_txs(index);
}
inline std::string* Block::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Block.txs)
  return txs_.Mutable(index);
}
inline void Block::set_txs(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plugin_grpc.Block.txs)
  txs_.Mutable(index)->assign(value);
}
inline void Block::set_txs(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plugin_grpc.Block.txs)
  txs_.Mutable(index)->assign(std::move(value));
}
inline void Block::set_txs(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plugin_grpc.Block.txs)
}
inline void Block::set_txs(int index, const void* value, size_t size) {
  txs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.Block.txs)
}
inline std::string* Block::_internal_add_txs() {
  return txs_.Add();
}
inline void Block::add_txs(const std::string& value) {
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plugin_grpc.Block.txs)
}
inline void Block::add_txs(std::string&& value) {
  txs_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plugin_grpc.Block.txs)
}
inline void Block::add_txs(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plugin_grpc.Block.txs)
}
inline void Block::add_txs(const void* value, size_t size) {
  txs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plugin_grpc.Block.txs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Block::txs() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.Block.txs)
  return txs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Block::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.Block.txs)
  return &txs_;
}

// -------------------------------------------------------------------

// Coin

// uint64 amount = 1;
inline void Coin::clear_amount() {
  amount_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Coin::_internal_amount() const {
  return amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Coin::amount() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Coin.amount)
  return _internal_amount();
}
inline void Coin::_internal_set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  amount_ = value;
}
inline void Coin::set_amount(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.Coin.amount)
}

// bytes script = 2;
inline void Coin::clear_script() {
  script_.ClearToEmpty();
}
inline const std::string& Coin::script() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Coin.script)
  return _internal_script();
}
inline void Coin::set_script(const std::string& value) {
  _internal_set_script(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.Coin.script)
}
inline std::string* Coin::mutable_script() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.Coin.script)
  return _internal_mutable_script();
}
inline const std::string& Coin::_internal_script() const {
  return script_.Get();
}
inline void Coin::_internal_set_script(const std::string& value) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Coin::set_script(std::string&& value) {
  
  script_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.Coin.script)
}
inline void Coin::set_script(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.Coin.script)
}
inline void Coin::set_script(const void* value,
    size_t size) {
  
  script_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.Coin.script)
}
inline std::string* Coin::_internal_mutable_script() {
  
  return script_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Coin::release_script() {
  // @@protoc_insertion_point(field_release:plugin_grpc.Coin.script)
  return script_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Coin::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  script_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), script,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.Coin.script)
}

// int32 height = 3;
inline void Coin::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coin::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Coin::height() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Coin.height)
  return _internal_height();
}
inline void Coin::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void Coin::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.Coin.height)
}

// bool is_coinbase = 4;
inline void Coin::clear_is_coinbase() {
  is_coinbase_ = false;
}
inline bool Coin::_internal_is_coinbase() const {
  return is_coinbase_;
}
inline bool Coin::is_coinbase() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.Coin.is_coinbase)
  return _internal_is_coinbase();
}
inline void Coin::_internal_set_is_coinbase(bool value) {
  
  is_coinbase_ = value;
}
inline void Coin::set_is_coinbase(bool value) {
  _internal_set_is_coinbase(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.Coin.is_coinbase)
}

// -------------------------------------------------------------------

// BlockMetadata

// uint32 field_id = 1;
inline void BlockMetadata::clear_field_id() {
  field_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMetadata::_internal_field_id() const {
  return field_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BlockMetadata::field_id() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockMetadata.field_id)
  return _internal_field_id();
}
inline void BlockMetadata::_internal_set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  field_id_ = value;
}
inline void BlockMetadata::set_field_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_field_id(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockMetadata.field_id)
}

// bytes field_value = 2;
inline void BlockMetadata::clear_field_value() {
  field_value_.ClearToEmpty();
}
inline const std::string& BlockMetadata::field_value() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockMetadata.field_value)
  return _internal_field_value();
}
inline void BlockMetadata::set_field_value(const std::string& value) {
  _internal_set_field_value(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockMetadata.field_value)
}
inline std::string* BlockMetadata::mutable_field_value() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockMetadata.field_value)
  return _internal_mutable_field_value();
}
inline const std::string& BlockMetadata::_internal_field_value() const {
  return field_value_.Get();
}
inline void BlockMetadata::_internal_set_field_value(const std::string& value) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockMetadata::set_field_value(std::string&& value) {
  
  field_value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockMetadata.field_value)
}
inline void BlockMetadata::set_field_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockMetadata.field_value)
}
inline void BlockMetadata::set_field_value(const void* value,
    size_t size) {
  
  field_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockMetadata.field_value)
}
inline std::string* BlockMetadata::_internal_mutable_field_value() {
  
  return field_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockMetadata::release_field_value() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockMetadata.field_value)
  return field_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockMetadata::set_allocated_field_value(std::string* field_value) {
  if (field_value != nullptr) {
    
  } else {
    
  }
  field_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockMetadata.field_value)
}

// -------------------------------------------------------------------

// BlockIdentifier

// int32 height = 1;
inline bool BlockIdentifier::_internal_has_height() const {
  return id_case() == kHeight;
}
inline bool BlockIdentifier::has_height() const {
  return _internal_has_height();
}
inline void BlockIdentifier::set_has_height() {
  _oneof_case_[0] = kHeight;
}
inline void BlockIdentifier::clear_height() {
  if (_internal_has_height()) {
    id_.height_ = 0;
    clear_has_id();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockIdentifier::_internal_height() const {
  if (_internal_has_height()) {
    return id_.height_;
  }
  return 0;
}
inline void BlockIdentifier::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_height()) {
    clear_id();
    set_has_height();
  }
  id_.height_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BlockIdentifier::height() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockIdentifier.height)
  return _internal_height();
}
inline void BlockIdentifier::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockIdentifier.height)
}

// bytes blockhash = 2;
inline bool BlockIdentifier::_internal_has_blockhash() const {
  return id_case() == kBlockhash;
}
inline bool BlockIdentifier::has_blockhash() const {
  return _internal_has_blockhash();
}
inline void BlockIdentifier::set_has_blockhash() {
  _oneof_case_[0] = kBlockhash;
}
inline void BlockIdentifier::clear_blockhash() {
  if (_internal_has_blockhash()) {
    id_.blockhash_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_id();
  }
}
inline const std::string& BlockIdentifier::blockhash() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockIdentifier.blockhash)
  return _internal_blockhash();
}
inline void BlockIdentifier::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockIdentifier.blockhash)
}
inline std::string* BlockIdentifier::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockIdentifier.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& BlockIdentifier::_internal_blockhash() const {
  if (_internal_has_blockhash()) {
    return id_.blockhash_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BlockIdentifier::_internal_set_blockhash(const std::string& value) {
  if (!_internal_has_blockhash()) {
    clear_id();
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockIdentifier::set_blockhash(std::string&& value) {
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockIdentifier.blockhash)
  if (!_internal_has_blockhash()) {
    clear_id();
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockIdentifier.blockhash)
}
inline void BlockIdentifier::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_blockhash()) {
    clear_id();
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockIdentifier.blockhash)
}
inline void BlockIdentifier::set_blockhash(const void* value,
                             size_t size) {
  if (!_internal_has_blockhash()) {
    clear_id();
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  id_.blockhash_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockIdentifier.blockhash)
}
inline std::string* BlockIdentifier::_internal_mutable_blockhash() {
  if (!_internal_has_blockhash()) {
    clear_id();
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return id_.blockhash_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockIdentifier::release_blockhash() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockIdentifier.blockhash)
  if (_internal_has_blockhash()) {
    clear_has_id();
    return id_.blockhash_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void BlockIdentifier::set_allocated_blockhash(std::string* blockhash) {
  if (has_id()) {
    clear_id();
  }
  if (blockhash != nullptr) {
    set_has_blockhash();
    id_.blockhash_.UnsafeSetDefault(blockhash);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(blockhash);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockIdentifier.blockhash)
}

inline bool BlockIdentifier::has_id() const {
  return id_case() != ID_NOT_SET;
}
inline void BlockIdentifier::clear_has_id() {
  _oneof_case_[0] = ID_NOT_SET;
}
inline BlockIdentifier::IdCase BlockIdentifier::id_case() const {
  return BlockIdentifier::IdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdatedBlockTip

// bytes blockhash = 1;
inline void UpdatedBlockTip::clear_blockhash() {
  blockhash_.ClearToEmpty();
}
inline const std::string& UpdatedBlockTip::blockhash() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.UpdatedBlockTip.blockhash)
  return _internal_blockhash();
}
inline void UpdatedBlockTip::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.UpdatedBlockTip.blockhash)
}
inline std::string* UpdatedBlockTip::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.UpdatedBlockTip.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& UpdatedBlockTip::_internal_blockhash() const {
  return blockhash_.Get();
}
inline void UpdatedBlockTip::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdatedBlockTip::set_blockhash(std::string&& value) {
  
  blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.UpdatedBlockTip.blockhash)
}
inline void UpdatedBlockTip::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.UpdatedBlockTip.blockhash)
}
inline void UpdatedBlockTip::set_blockhash(const void* value,
    size_t size) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.UpdatedBlockTip.blockhash)
}
inline std::string* UpdatedBlockTip::_internal_mutable_blockhash() {
  
  return blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdatedBlockTip::release_blockhash() {
  // @@protoc_insertion_point(field_release:plugin_grpc.UpdatedBlockTip.blockhash)
  return blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdatedBlockTip::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.UpdatedBlockTip.blockhash)
}

// -------------------------------------------------------------------

// TransactionAddedToMempool

// bytes tx = 1;
inline void TransactionAddedToMempool::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& TransactionAddedToMempool::tx() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.TransactionAddedToMempool.tx)
  return _internal_tx();
}
inline void TransactionAddedToMempool::set_tx(const std::string& value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.TransactionAddedToMempool.tx)
}
inline std::string* TransactionAddedToMempool::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.TransactionAddedToMempool.tx)
  return _internal_mutable_tx();
}
inline const std::string& TransactionAddedToMempool::_internal_tx() const {
  return tx_.Get();
}
inline void TransactionAddedToMempool::_internal_set_tx(const std::string& value) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionAddedToMempool::set_tx(std::string&& value) {
  
  tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.TransactionAddedToMempool.tx)
}
inline void TransactionAddedToMempool::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.TransactionAddedToMempool.tx)
}
inline void TransactionAddedToMempool::set_tx(const void* value,
    size_t size) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.TransactionAddedToMempool.tx)
}
inline std::string* TransactionAddedToMempool::_internal_mutable_tx() {
  
  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionAddedToMempool::release_tx() {
  // @@protoc_insertion_point(field_release:plugin_grpc.TransactionAddedToMempool.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionAddedToMempool::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.TransactionAddedToMempool.tx)
}

// -------------------------------------------------------------------

// TransactionRemovedFromMempool

// bytes txid = 1;
inline void TransactionRemovedFromMempool::clear_txid() {
  txid_.ClearToEmpty();
}
inline const std::string& TransactionRemovedFromMempool::txid() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.TransactionRemovedFromMempool.txid)
  return _internal_txid();
}
inline void TransactionRemovedFromMempool::set_txid(const std::string& value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.TransactionRemovedFromMempool.txid)
}
inline std::string* TransactionRemovedFromMempool::mutable_txid() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.TransactionRemovedFromMempool.txid)
  return _internal_mutable_txid();
}
inline const std::string& TransactionRemovedFromMempool::_internal_txid() const {
  return txid_.Get();
}
inline void TransactionRemovedFromMempool::_internal_set_txid(const std::string& value) {
  
  txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TransactionRemovedFromMempool::set_txid(std::string&& value) {
  
  txid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.TransactionRemovedFromMempool.txid)
}
inline void TransactionRemovedFromMempool::set_txid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.TransactionRemovedFromMempool.txid)
}
inline void TransactionRemovedFromMempool::set_txid(const void* value,
    size_t size) {
  
  txid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.TransactionRemovedFromMempool.txid)
}
inline std::string* TransactionRemovedFromMempool::_internal_mutable_txid() {
  
  return txid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TransactionRemovedFromMempool::release_txid() {
  // @@protoc_insertion_point(field_release:plugin_grpc.TransactionRemovedFromMempool.txid)
  return txid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionRemovedFromMempool::set_allocated_txid(std::string* txid) {
  if (txid != nullptr) {
    
  } else {
    
  }
  txid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), txid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.TransactionRemovedFromMempool.txid)
}

// -------------------------------------------------------------------

// BlockConnected

// bytes blockheader = 1;
inline void BlockConnected::clear_blockheader() {
  blockheader_.ClearToEmpty();
}
inline const std::string& BlockConnected::blockheader() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockConnected.blockheader)
  return _internal_blockheader();
}
inline void BlockConnected::set_blockheader(const std::string& value) {
  _internal_set_blockheader(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockConnected.blockheader)
}
inline std::string* BlockConnected::mutable_blockheader() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockConnected.blockheader)
  return _internal_mutable_blockheader();
}
inline const std::string& BlockConnected::_internal_blockheader() const {
  return blockheader_.Get();
}
inline void BlockConnected::_internal_set_blockheader(const std::string& value) {
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockConnected::set_blockheader(std::string&& value) {
  
  blockheader_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockConnected.blockheader)
}
inline void BlockConnected::set_blockheader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockConnected.blockheader)
}
inline void BlockConnected::set_blockheader(const void* value,
    size_t size) {
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockConnected.blockheader)
}
inline std::string* BlockConnected::_internal_mutable_blockheader() {
  
  return blockheader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockConnected::release_blockheader() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockConnected.blockheader)
  return blockheader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockConnected::set_allocated_blockheader(std::string* blockheader) {
  if (blockheader != nullptr) {
    
  } else {
    
  }
  blockheader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockheader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockConnected.blockheader)
}

// repeated .plugin_grpc.BlockMetadata metadata = 2;
inline int BlockConnected::_internal_metadata_size() const {
  return metadata_.size();
}
inline int BlockConnected::metadata_size() const {
  return _internal_metadata_size();
}
inline void BlockConnected::clear_metadata() {
  metadata_.Clear();
}
inline ::plugin_grpc::BlockMetadata* BlockConnected::mutable_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockConnected.metadata)
  return metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >*
BlockConnected::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.BlockConnected.metadata)
  return &metadata_;
}
inline const ::plugin_grpc::BlockMetadata& BlockConnected::_internal_metadata(int index) const {
  return metadata_.Get(index);
}
inline const ::plugin_grpc::BlockMetadata& BlockConnected::metadata(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockConnected.metadata)
  return _internal_metadata(index);
}
inline ::plugin_grpc::BlockMetadata* BlockConnected::_internal_add_metadata() {
  return metadata_.Add();
}
inline ::plugin_grpc::BlockMetadata* BlockConnected::add_metadata() {
  // @@protoc_insertion_point(field_add:plugin_grpc.BlockConnected.metadata)
  return _internal_add_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::BlockMetadata >&
BlockConnected::metadata() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.BlockConnected.metadata)
  return metadata_;
}

// repeated bytes txids = 3;
inline int BlockConnected::_internal_txids_size() const {
  return txids_.size();
}
inline int BlockConnected::txids_size() const {
  return _internal_txids_size();
}
inline void BlockConnected::clear_txids() {
  txids_.Clear();
}
inline std::string* BlockConnected::add_txids() {
  // @@protoc_insertion_point(field_add_mutable:plugin_grpc.BlockConnected.txids)
  return _internal_add_txids();
}
inline const std::string& BlockConnected::_internal_txids(int index) const {
  return txids_.Get(index);
}
inline const std::string& BlockConnected::txids(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockConnected.txids)
  return _internal_txids(index);
}
inline std::string* BlockConnected::mutable_txids(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockConnected.txids)
  return txids_.Mutable(index);
}
inline void BlockConnected::set_txids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockConnected.txids)
  txids_.Mutable(index)->assign(value);
}
inline void BlockConnected::set_txids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockConnected.txids)
  txids_.Mutable(index)->assign(std::move(value));
}
inline void BlockConnected::set_txids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockConnected.txids)
}
inline void BlockConnected::set_txids(int index, const void* value, size_t size) {
  txids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockConnected.txids)
}
inline std::string* BlockConnected::_internal_add_txids() {
  return txids_.Add();
}
inline void BlockConnected::add_txids(const std::string& value) {
  txids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:plugin_grpc.BlockConnected.txids)
}
inline void BlockConnected::add_txids(std::string&& value) {
  txids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:plugin_grpc.BlockConnected.txids)
}
inline void BlockConnected::add_txids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  txids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:plugin_grpc.BlockConnected.txids)
}
inline void BlockConnected::add_txids(const void* value, size_t size) {
  txids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:plugin_grpc.BlockConnected.txids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BlockConnected::txids() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.BlockConnected.txids)
  return txids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BlockConnected::mutable_txids() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.BlockConnected.txids)
  return &txids_;
}

// -------------------------------------------------------------------

// BlockDisconnected

// bytes blockhash = 1;
inline void BlockDisconnected::clear_blockhash() {
  blockhash_.ClearToEmpty();
}
inline const std::string& BlockDisconnected::blockhash() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockDisconnected.blockhash)
  return _internal_blockhash();
}
inline void BlockDisconnected::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockDisconnected.blockhash)
}
inline std::string* BlockDisconnected::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockDisconnected.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& BlockDisconnected::_internal_blockhash() const {
  return blockhash_.Get();
}
inline void BlockDisconnected::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockDisconnected::set_blockhash(std::string&& value) {
  
  blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockDisconnected.blockhash)
}
inline void BlockDisconnected::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockDisconnected.blockhash)
}
inline void BlockDisconnected::set_blockhash(const void* value,
    size_t size) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockDisconnected.blockhash)
}
inline std::string* BlockDisconnected::_internal_mutable_blockhash() {
  
  return blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockDisconnected::release_blockhash() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockDisconnected.blockhash)
  return blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockDisconnected::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockDisconnected.blockhash)
}

// -------------------------------------------------------------------

// ChainStateFlushed

// bytes blockhash = 1;
inline void ChainStateFlushed::clear_blockhash() {
  blockhash_.ClearToEmpty();
}
inline const std::string& ChainStateFlushed::blockhash() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.ChainStateFlushed.blockhash)
  return _internal_blockhash();
}
inline void ChainStateFlushed::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.ChainStateFlushed.blockhash)
}
inline std::string* ChainStateFlushed::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.ChainStateFlushed.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& ChainStateFlushed::_internal_blockhash() const {
  return blockhash_.Get();
}
inline void ChainStateFlushed::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChainStateFlushed::set_blockhash(std::string&& value) {
  
  blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.ChainStateFlushed.blockhash)
}
inline void ChainStateFlushed::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.ChainStateFlushed.blockhash)
}
inline void ChainStateFlushed::set_blockhash(const void* value,
    size_t size) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.ChainStateFlushed.blockhash)
}
inline std::string* ChainStateFlushed::_internal_mutable_blockhash() {
  
  return blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChainStateFlushed::release_blockhash() {
  // @@protoc_insertion_point(field_release:plugin_grpc.ChainStateFlushed.blockhash)
  return blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChainStateFlushed::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.ChainStateFlushed.blockhash)
}

// -------------------------------------------------------------------

// BlockChecked

// bytes blockhash = 1;
inline void BlockChecked::clear_blockhash() {
  blockhash_.ClearToEmpty();
}
inline const std::string& BlockChecked::blockhash() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockChecked.blockhash)
  return _internal_blockhash();
}
inline void BlockChecked::set_blockhash(const std::string& value) {
  _internal_set_blockhash(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockChecked.blockhash)
}
inline std::string* BlockChecked::mutable_blockhash() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockChecked.blockhash)
  return _internal_mutable_blockhash();
}
inline const std::string& BlockChecked::_internal_blockhash() const {
  return blockhash_.Get();
}
inline void BlockChecked::_internal_set_blockhash(const std::string& value) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockChecked::set_blockhash(std::string&& value) {
  
  blockhash_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockChecked.blockhash)
}
inline void BlockChecked::set_blockhash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockChecked.blockhash)
}
inline void BlockChecked::set_blockhash(const void* value,
    size_t size) {
  
  blockhash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockChecked.blockhash)
}
inline std::string* BlockChecked::_internal_mutable_blockhash() {
  
  return blockhash_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockChecked::release_blockhash() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockChecked.blockhash)
  return blockhash_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockChecked::set_allocated_blockhash(std::string* blockhash) {
  if (blockhash != nullptr) {
    
  } else {
    
  }
  blockhash_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockhash,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockChecked.blockhash)
}

// .plugin_grpc.BlockValidationState validation_state = 2;
inline bool BlockChecked::_internal_has_validation_state() const {
  return this != internal_default_instance() && validation_state_ != nullptr;
}
inline bool BlockChecked::has_validation_state() const {
  return _internal_has_validation_state();
}
inline void BlockChecked::clear_validation_state() {
  if (GetArena() == nullptr && validation_state_ != nullptr) {
    delete validation_state_;
  }
  validation_state_ = nullptr;
}
inline const ::plugin_grpc::BlockValidationState& BlockChecked::_internal_validation_state() const {
  const ::plugin_grpc::BlockValidationState* p = validation_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::plugin_grpc::BlockValidationState&>(
      ::plugin_grpc::_BlockValidationState_default_instance_);
}
inline const ::plugin_grpc::BlockValidationState& BlockChecked::validation_state() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockChecked.validation_state)
  return _internal_validation_state();
}
inline void BlockChecked::unsafe_arena_set_allocated_validation_state(
    ::plugin_grpc::BlockValidationState* validation_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validation_state_);
  }
  validation_state_ = validation_state;
  if (validation_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.BlockChecked.validation_state)
}
inline ::plugin_grpc::BlockValidationState* BlockChecked::release_validation_state() {
  
  ::plugin_grpc::BlockValidationState* temp = validation_state_;
  validation_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plugin_grpc::BlockValidationState* BlockChecked::unsafe_arena_release_validation_state() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockChecked.validation_state)
  
  ::plugin_grpc::BlockValidationState* temp = validation_state_;
  validation_state_ = nullptr;
  return temp;
}
inline ::plugin_grpc::BlockValidationState* BlockChecked::_internal_mutable_validation_state() {
  
  if (validation_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::plugin_grpc::BlockValidationState>(GetArena());
    validation_state_ = p;
  }
  return validation_state_;
}
inline ::plugin_grpc::BlockValidationState* BlockChecked::mutable_validation_state() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockChecked.validation_state)
  return _internal_mutable_validation_state();
}
inline void BlockChecked::set_allocated_validation_state(::plugin_grpc::BlockValidationState* validation_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete validation_state_;
  }
  if (validation_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(validation_state);
    if (message_arena != submessage_arena) {
      validation_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validation_state, submessage_arena);
    }
    
  } else {
    
  }
  validation_state_ = validation_state;
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockChecked.validation_state)
}

// -------------------------------------------------------------------

// BlockValidationState

// string state = 1;
inline void BlockValidationState::clear_state() {
  state_.ClearToEmpty();
}
inline const std::string& BlockValidationState::state() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockValidationState.state)
  return _internal_state();
}
inline void BlockValidationState::set_state(const std::string& value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockValidationState.state)
}
inline std::string* BlockValidationState::mutable_state() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockValidationState.state)
  return _internal_mutable_state();
}
inline const std::string& BlockValidationState::_internal_state() const {
  return state_.Get();
}
inline void BlockValidationState::_internal_set_state(const std::string& value) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockValidationState::set_state(std::string&& value) {
  
  state_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockValidationState.state)
}
inline void BlockValidationState::set_state(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockValidationState.state)
}
inline void BlockValidationState::set_state(const char* value,
    size_t size) {
  
  state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockValidationState.state)
}
inline std::string* BlockValidationState::_internal_mutable_state() {
  
  return state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockValidationState::release_state() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockValidationState.state)
  return state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockValidationState::set_allocated_state(std::string* state) {
  if (state != nullptr) {
    
  } else {
    
  }
  state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), state,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockValidationState.state)
}

// string reason = 2;
inline void BlockValidationState::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& BlockValidationState::reason() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.BlockValidationState.reason)
  return _internal_reason();
}
inline void BlockValidationState::set_reason(const std::string& value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.BlockValidationState.reason)
}
inline std::string* BlockValidationState::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.BlockValidationState.reason)
  return _internal_mutable_reason();
}
inline const std::string& BlockValidationState::_internal_reason() const {
  return reason_.Get();
}
inline void BlockValidationState::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BlockValidationState::set_reason(std::string&& value) {
  
  reason_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.BlockValidationState.reason)
}
inline void BlockValidationState::set_reason(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.BlockValidationState.reason)
}
inline void BlockValidationState::set_reason(const char* value,
    size_t size) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.BlockValidationState.reason)
}
inline std::string* BlockValidationState::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BlockValidationState::release_reason() {
  // @@protoc_insertion_point(field_release:plugin_grpc.BlockValidationState.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BlockValidationState::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.BlockValidationState.reason)
}

// -------------------------------------------------------------------

// NewPoWValidBlock

// bytes blockheader = 1;
inline void NewPoWValidBlock::clear_blockheader() {
  blockheader_.ClearToEmpty();
}
inline const std::string& NewPoWValidBlock::blockheader() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.NewPoWValidBlock.blockheader)
  return _internal_blockheader();
}
inline void NewPoWValidBlock::set_blockheader(const std::string& value) {
  _internal_set_blockheader(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.NewPoWValidBlock.blockheader)
}
inline std::string* NewPoWValidBlock::mutable_blockheader() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.NewPoWValidBlock.blockheader)
  return _internal_mutable_blockheader();
}
inline const std::string& NewPoWValidBlock::_internal_blockheader() const {
  return blockheader_.Get();
}
inline void NewPoWValidBlock::_internal_set_blockheader(const std::string& value) {
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void NewPoWValidBlock::set_blockheader(std::string&& value) {
  
  blockheader_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.NewPoWValidBlock.blockheader)
}
inline void NewPoWValidBlock::set_blockheader(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.NewPoWValidBlock.blockheader)
}
inline void NewPoWValidBlock::set_blockheader(const void* value,
    size_t size) {
  
  blockheader_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.NewPoWValidBlock.blockheader)
}
inline std::string* NewPoWValidBlock::_internal_mutable_blockheader() {
  
  return blockheader_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* NewPoWValidBlock::release_blockheader() {
  // @@protoc_insertion_point(field_release:plugin_grpc.NewPoWValidBlock.blockheader)
  return blockheader_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NewPoWValidBlock::set_allocated_blockheader(std::string* blockheader) {
  if (blockheader != nullptr) {
    
  } else {
    
  }
  blockheader_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), blockheader,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.NewPoWValidBlock.blockheader)
}

// -------------------------------------------------------------------

// GetBlockRequest

// .plugin_grpc.BlockIdentifier block_id = 1;
inline bool GetBlockRequest::_internal_has_block_id() const {
  return this != internal_default_instance() && block_id_ != nullptr;
}
inline bool GetBlockRequest::has_block_id() const {
  return _internal_has_block_id();
}
inline void GetBlockRequest::clear_block_id() {
  if (GetArena() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
}
inline const ::plugin_grpc::BlockIdentifier& GetBlockRequest::_internal_block_id() const {
  const ::plugin_grpc::BlockIdentifier* p = block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::plugin_grpc::BlockIdentifier&>(
      ::plugin_grpc::_BlockIdentifier_default_instance_);
}
inline const ::plugin_grpc::BlockIdentifier& GetBlockRequest::block_id() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.GetBlockRequest.block_id)
  return _internal_block_id();
}
inline void GetBlockRequest::unsafe_arena_set_allocated_block_id(
    ::plugin_grpc::BlockIdentifier* block_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  block_id_ = block_id;
  if (block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.GetBlockRequest.block_id)
}
inline ::plugin_grpc::BlockIdentifier* GetBlockRequest::release_block_id() {
  
  ::plugin_grpc::BlockIdentifier* temp = block_id_;
  block_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockRequest::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:plugin_grpc.GetBlockRequest.block_id)
  
  ::plugin_grpc::BlockIdentifier* temp = block_id_;
  block_id_ = nullptr;
  return temp;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockRequest::_internal_mutable_block_id() {
  
  if (block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::plugin_grpc::BlockIdentifier>(GetArena());
    block_id_ = p;
  }
  return block_id_;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockRequest::mutable_block_id() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.GetBlockRequest.block_id)
  return _internal_mutable_block_id();
}
inline void GetBlockRequest::set_allocated_block_id(::plugin_grpc::BlockIdentifier* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    
  } else {
    
  }
  block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.GetBlockRequest.block_id)
}

// -------------------------------------------------------------------

// GetBlockResponse

// .plugin_grpc.Block block = 1;
inline bool GetBlockResponse::_internal_has_block() const {
  return this != internal_default_instance() && block_ != nullptr;
}
inline bool GetBlockResponse::has_block() const {
  return _internal_has_block();
}
inline void GetBlockResponse::clear_block() {
  if (GetArena() == nullptr && block_ != nullptr) {
    delete block_;
  }
  block_ = nullptr;
}
inline const ::plugin_grpc::Block& GetBlockResponse::_internal_block() const {
  const ::plugin_grpc::Block* p = block_;
  return p != nullptr ? *p : reinterpret_cast<const ::plugin_grpc::Block&>(
      ::plugin_grpc::_Block_default_instance_);
}
inline const ::plugin_grpc::Block& GetBlockResponse::block() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.GetBlockResponse.block)
  return _internal_block();
}
inline void GetBlockResponse::unsafe_arena_set_allocated_block(
    ::plugin_grpc::Block* block) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_);
  }
  block_ = block;
  if (block) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.GetBlockResponse.block)
}
inline ::plugin_grpc::Block* GetBlockResponse::release_block() {
  
  ::plugin_grpc::Block* temp = block_;
  block_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plugin_grpc::Block* GetBlockResponse::unsafe_arena_release_block() {
  // @@protoc_insertion_point(field_release:plugin_grpc.GetBlockResponse.block)
  
  ::plugin_grpc::Block* temp = block_;
  block_ = nullptr;
  return temp;
}
inline ::plugin_grpc::Block* GetBlockResponse::_internal_mutable_block() {
  
  if (block_ == nullptr) {
    auto* p = CreateMaybeMessage<::plugin_grpc::Block>(GetArena());
    block_ = p;
  }
  return block_;
}
inline ::plugin_grpc::Block* GetBlockResponse::mutable_block() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.GetBlockResponse.block)
  return _internal_mutable_block();
}
inline void GetBlockResponse::set_allocated_block(::plugin_grpc::Block* block) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_;
  }
  if (block) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block);
    if (message_arena != submessage_arena) {
      block = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block, submessage_arena);
    }
    
  } else {
    
  }
  block_ = block;
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.GetBlockResponse.block)
}

// -------------------------------------------------------------------

// GetBlockUndoDataRequest

// .plugin_grpc.BlockIdentifier block_id = 1;
inline bool GetBlockUndoDataRequest::_internal_has_block_id() const {
  return this != internal_default_instance() && block_id_ != nullptr;
}
inline bool GetBlockUndoDataRequest::has_block_id() const {
  return _internal_has_block_id();
}
inline void GetBlockUndoDataRequest::clear_block_id() {
  if (GetArena() == nullptr && block_id_ != nullptr) {
    delete block_id_;
  }
  block_id_ = nullptr;
}
inline const ::plugin_grpc::BlockIdentifier& GetBlockUndoDataRequest::_internal_block_id() const {
  const ::plugin_grpc::BlockIdentifier* p = block_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::plugin_grpc::BlockIdentifier&>(
      ::plugin_grpc::_BlockIdentifier_default_instance_);
}
inline const ::plugin_grpc::BlockIdentifier& GetBlockUndoDataRequest::block_id() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.GetBlockUndoDataRequest.block_id)
  return _internal_block_id();
}
inline void GetBlockUndoDataRequest::unsafe_arena_set_allocated_block_id(
    ::plugin_grpc::BlockIdentifier* block_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(block_id_);
  }
  block_id_ = block_id;
  if (block_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:plugin_grpc.GetBlockUndoDataRequest.block_id)
}
inline ::plugin_grpc::BlockIdentifier* GetBlockUndoDataRequest::release_block_id() {
  
  ::plugin_grpc::BlockIdentifier* temp = block_id_;
  block_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockUndoDataRequest::unsafe_arena_release_block_id() {
  // @@protoc_insertion_point(field_release:plugin_grpc.GetBlockUndoDataRequest.block_id)
  
  ::plugin_grpc::BlockIdentifier* temp = block_id_;
  block_id_ = nullptr;
  return temp;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockUndoDataRequest::_internal_mutable_block_id() {
  
  if (block_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::plugin_grpc::BlockIdentifier>(GetArena());
    block_id_ = p;
  }
  return block_id_;
}
inline ::plugin_grpc::BlockIdentifier* GetBlockUndoDataRequest::mutable_block_id() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.GetBlockUndoDataRequest.block_id)
  return _internal_mutable_block_id();
}
inline void GetBlockUndoDataRequest::set_allocated_block_id(::plugin_grpc::BlockIdentifier* block_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete block_id_;
  }
  if (block_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(block_id);
    if (message_arena != submessage_arena) {
      block_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, block_id, submessage_arena);
    }
    
  } else {
    
  }
  block_id_ = block_id;
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.GetBlockUndoDataRequest.block_id)
}

// -------------------------------------------------------------------

// GetBlockUndoDataResponse

// repeated .plugin_grpc.Coin coins = 1;
inline int GetBlockUndoDataResponse::_internal_coins_size() const {
  return coins_.size();
}
inline int GetBlockUndoDataResponse::coins_size() const {
  return _internal_coins_size();
}
inline void GetBlockUndoDataResponse::clear_coins() {
  coins_.Clear();
}
inline ::plugin_grpc::Coin* GetBlockUndoDataResponse::mutable_coins(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.GetBlockUndoDataResponse.coins)
  return coins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::Coin >*
GetBlockUndoDataResponse::mutable_coins() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.GetBlockUndoDataResponse.coins)
  return &coins_;
}
inline const ::plugin_grpc::Coin& GetBlockUndoDataResponse::_internal_coins(int index) const {
  return coins_.Get(index);
}
inline const ::plugin_grpc::Coin& GetBlockUndoDataResponse::coins(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.GetBlockUndoDataResponse.coins)
  return _internal_coins(index);
}
inline ::plugin_grpc::Coin* GetBlockUndoDataResponse::_internal_add_coins() {
  return coins_.Add();
}
inline ::plugin_grpc::Coin* GetBlockUndoDataResponse::add_coins() {
  // @@protoc_insertion_point(field_add:plugin_grpc.GetBlockUndoDataResponse.coins)
  return _internal_add_coins();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::Coin >&
GetBlockUndoDataResponse::coins() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.GetBlockUndoDataResponse.coins)
  return coins_;
}

// -------------------------------------------------------------------

// GetMempoolRequest

// -------------------------------------------------------------------

// GetMempoolResponse

// repeated .plugin_grpc.MempoolTx txs = 1;
inline int GetMempoolResponse::_internal_txs_size() const {
  return txs_.size();
}
inline int GetMempoolResponse::txs_size() const {
  return _internal_txs_size();
}
inline void GetMempoolResponse::clear_txs() {
  txs_.Clear();
}
inline ::plugin_grpc::MempoolTx* GetMempoolResponse::mutable_txs(int index) {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.GetMempoolResponse.txs)
  return txs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::MempoolTx >*
GetMempoolResponse::mutable_txs() {
  // @@protoc_insertion_point(field_mutable_list:plugin_grpc.GetMempoolResponse.txs)
  return &txs_;
}
inline const ::plugin_grpc::MempoolTx& GetMempoolResponse::_internal_txs(int index) const {
  return txs_.Get(index);
}
inline const ::plugin_grpc::MempoolTx& GetMempoolResponse::txs(int index) const {
  // @@protoc_insertion_point(field_get:plugin_grpc.GetMempoolResponse.txs)
  return _internal_txs(index);
}
inline ::plugin_grpc::MempoolTx* GetMempoolResponse::_internal_add_txs() {
  return txs_.Add();
}
inline ::plugin_grpc::MempoolTx* GetMempoolResponse::add_txs() {
  // @@protoc_insertion_point(field_add:plugin_grpc.GetMempoolResponse.txs)
  return _internal_add_txs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::plugin_grpc::MempoolTx >&
GetMempoolResponse::txs() const {
  // @@protoc_insertion_point(field_list:plugin_grpc.GetMempoolResponse.txs)
  return txs_;
}

// -------------------------------------------------------------------

// MempoolTx

// bytes tx = 1;
inline void MempoolTx::clear_tx() {
  tx_.ClearToEmpty();
}
inline const std::string& MempoolTx::tx() const {
  // @@protoc_insertion_point(field_get:plugin_grpc.MempoolTx.tx)
  return _internal_tx();
}
inline void MempoolTx::set_tx(const std::string& value) {
  _internal_set_tx(value);
  // @@protoc_insertion_point(field_set:plugin_grpc.MempoolTx.tx)
}
inline std::string* MempoolTx::mutable_tx() {
  // @@protoc_insertion_point(field_mutable:plugin_grpc.MempoolTx.tx)
  return _internal_mutable_tx();
}
inline const std::string& MempoolTx::_internal_tx() const {
  return tx_.Get();
}
inline void MempoolTx::_internal_set_tx(const std::string& value) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MempoolTx::set_tx(std::string&& value) {
  
  tx_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:plugin_grpc.MempoolTx.tx)
}
inline void MempoolTx::set_tx(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:plugin_grpc.MempoolTx.tx)
}
inline void MempoolTx::set_tx(const void* value,
    size_t size) {
  
  tx_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:plugin_grpc.MempoolTx.tx)
}
inline std::string* MempoolTx::_internal_mutable_tx() {
  
  return tx_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MempoolTx::release_tx() {
  // @@protoc_insertion_point(field_release:plugin_grpc.MempoolTx.tx)
  return tx_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MempoolTx::set_allocated_tx(std::string* tx) {
  if (tx != nullptr) {
    
  } else {
    
  }
  tx_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tx,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:plugin_grpc.MempoolTx.tx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace plugin_grpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_plugin_5fgrpc_2eproto
